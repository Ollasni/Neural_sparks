#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –∑–∞–ø—É—Å–∫–∞ BI-GPT Agent —Å fine-tuned –º–æ–¥–µ–ª—å—é (Phi-3 + LoRA)
"""

import os
import sys
import subprocess
from pathlib import Path

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
try:
    from dotenv import load_dotenv
    load_dotenv()
except ImportError:
    print("‚ö†Ô∏è –ú–æ–¥—É–ª—å python-dotenv –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ: pip install python-dotenv")

def setup_finetuned_env():
    """–ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è fine-tuned –º–æ–¥–µ–ª–∏"""
    print("üîß –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫ –¥–ª—è fine-tuned –º–æ–¥–µ–ª–∏")
    print("=" * 50)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ fine-tuned –º–æ–¥–µ–ª–∏
    finetuned_path = Path("finetuning/phi3_bird_lora")
    base_model_path = Path("finetuning/phi3-mini")
    
    if not finetuned_path.exists():
        print("‚ùå Fine-tuned LoRA –∞–¥–∞–ø—Ç–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        print("–ü—É—Ç—å:", finetuned_path.absolute())
        print("\n–î–ª—è –æ–±—É—á–µ–Ω–∏—è –º–æ–¥–µ–ª–∏ –∑–∞–ø—É—Å—Ç–∏—Ç–µ:")
        print("cd finetuning && python finetune_bird_phi3.py")
        return False
    
    if not base_model_path.exists():
        print("‚ùå –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å Phi-3 –Ω–µ –Ω–∞–π–¥–µ–Ω–∞!")
        print("–ü—É—Ç—å:", base_model_path.absolute())
        print("\n–°–∫–∞—á–∞–π—Ç–µ –º–æ–¥–µ–ª—å Phi-3 –∏–ª–∏ —É–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –æ–Ω–∞ –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –ø–∞–ø–∫–µ")
        return False
    
    print(f"‚úÖ Fine-tuned LoRA –∞–¥–∞–ø—Ç–µ—Ä –Ω–∞–π–¥–µ–Ω: {finetuned_path}")
    print(f"‚úÖ –ë–∞–∑–æ–≤–∞—è –º–æ–¥–µ–ª—å Phi-3 –Ω–∞–π–¥–µ–Ω–∞: {base_model_path}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏
    try:
        import torch
        import transformers
        import peft
        print("‚úÖ –ù–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    except ImportError as e:
        print(f"‚ùå –ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –±–∏–±–ª–∏–æ—Ç–µ–∫–∏: {e}")
        print("\n–£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
        print("pip install torch transformers peft")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ GPU/MPS
    if torch.cuda.is_available():
        print("‚úÖ CUDA GPU –¥–æ—Å—Ç—É–ø–µ–Ω")
    elif torch.backends.mps.is_available():
        print("‚úÖ Apple MPS –¥–æ—Å—Ç—É–ø–µ–Ω")
    else:
        print("‚ö†Ô∏è  GPU –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è CPU (–º–µ–¥–ª–µ–Ω–Ω–æ)")
    
    return True

def test_finetuned_model():
    """–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç fine-tuned –º–æ–¥–µ–ª–∏"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fine-tuned –º–æ–¥–µ–ª–∏...")
    
    try:
        from finetuned_sql_generator import FineTunedSQLGenerator
        
        # –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
        generator = FineTunedSQLGenerator()
        
        # –¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å
        test_query = "–ø–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
        print(f"–¢–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å: {test_query}")
        
        sql, exec_time = generator.generate_sql(test_query)
        
        if sql:
            print(f"‚úÖ –ú–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç! SQL: {sql}")
            print(f"‚è±Ô∏è  –í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏: {exec_time:.2f}—Å")
            generator.cleanup()
            return True
        else:
            print("‚ùå –ú–æ–¥–µ–ª—å –Ω–µ —Å–º–æ–≥–ª–∞ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL")
            generator.cleanup()
            return False
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –º–æ–¥–µ–ª–∏: {e}")
        return False

def launch_with_finetuned():
    """–ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã —Å fine-tuned –º–æ–¥–µ–ª—å—é"""
    print("\nüöÄ –ó–∞–ø—É—Å–∫ BI-GPT Agent —Å fine-tuned –º–æ–¥–µ–ª—å—é")
    print("=" * 50)
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not setup_finetuned_env():
        return False
    
    # –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç –º–æ–¥–µ–ª–∏
    if not test_finetuned_model():
        print("\n‚ö†Ô∏è  –¢–µ—Å—Ç –º–æ–¥–µ–ª–∏ –Ω–µ –ø—Ä–æ—à–µ–ª, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º...")
        print("–°–∏—Å—Ç–µ–º–∞ –ø–æ–ø—ã—Ç–∞–µ—Ç—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –º–æ–¥–µ–ª—å –ø—Ä–∏ –ø–µ—Ä–≤–æ–º –∑–∞–ø—Ä–æ—Å–µ")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è fine-tuned –º–æ–¥–µ–ª–∏
    os.environ["USE_FINETUNED_MODEL"] = "true"
    
    # –ó–∞–ø—É—Å–∫ —Å–∏—Å—Ç–µ–º—ã
    print("\nüåê –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞...")
    print("–û—Ç–∫—Ä–æ–µ—Ç—Å—è: http://localhost:8501")
    
    try:
        subprocess.run([
            sys.executable, "-m", "streamlit", "run", 
            "streamlit_app.py",
            "--server.port=8501",
            "--server.address=0.0.0.0"
        ])
    except KeyboardInterrupt:
        print("\nüëã –í–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("ü§ñ BI-GPT Agent - Fine-tuned Model Launcher")
    print("–ò—Å–ø–æ–ª—å–∑—É–µ—Ç Phi-3 —Å LoRA –∞–¥–∞–ø—Ç–µ—Ä–æ–º –¥–ª—è SQL –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    print("")
    
    if len(sys.argv) > 1 and sys.argv[1] == "--help":
        print("–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:")
        print("  python launch_finetuned.py          # –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞")
        print("  python launch_finetuned.py --test   # –¢–æ–ª—å–∫–æ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
        print("  python launch_finetuned.py --help   # –≠—Ç–∞ —Å–ø—Ä–∞–≤–∫–∞")
        return
    
    if len(sys.argv) > 1 and sys.argv[1] == "--test":
        print("üß™ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
        if setup_finetuned_env():
            print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∞")
        else:
            print("‚ùå –ü—Ä–æ–±–ª–µ–º—ã —Å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–µ–π")
        return
    
    try:
        launch_with_finetuned()
    except KeyboardInterrupt:
        print("\nüëã –ó–∞–ø—É—Å–∫ –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
    except Exception as e:
        print(f"üí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")

if __name__ == "__main__":
    main()
