"""
Streamlit –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å –¥–ª—è BI-GPT Agent
–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –º–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ UX –∏ —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å
"""

import streamlit as st
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import time
import os

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env —Ñ–∞–π–ª–∞
from dotenv import load_dotenv
load_dotenv()

from bi_gpt_agent import BIGPTAgent

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="BI-GPT Agent",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 0.5rem 0;
    }
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .error-box {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞
@st.cache_resource
def init_agent(api_key=None, base_url=None):
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è BI-GPT –∞–≥–µ–Ω—Ç–∞"""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –Ω—É–∂–Ω–æ –ª–∏ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å fine-tuned –º–æ–¥–µ–ª—å
    use_finetuned = os.getenv("USE_FINETUNED_MODEL", "false").lower() == "true"
    
    if use_finetuned:
        st.success("üéØ –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è fine-tuned –º–æ–¥–µ–ª—å Phi-3 + LoRA")
        return BIGPTAgent(use_finetuned=True)
    else:
        return BIGPTAgent(api_key=api_key, base_url=base_url)

def display_metrics_dashboard(agent):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –¥–∞—à–±–æ—Ä–¥ —Å –º–µ—Ç—Ä–∏–∫–∞–º–∏"""
    metrics = agent.get_performance_metrics()
    
    if not metrics:
        st.info("–ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –∑–∞–ø—Ä–æ—Å–∞—Ö")
        return
    
    col1, col2, col3, col4 = st.columns(4)
    
    with col1:
        st.metric(
            "–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", 
            f"{metrics.get('avg_execution_time', 0):.2f}s",
            delta=None
        )
    
    with col2:
        accuracy = metrics.get('sql_accuracy_rate', 0) * 100
        st.metric(
            "–¢–æ—á–Ω–æ—Å—Ç—å SQL", 
            f"{accuracy:.1f}%",
            delta=None
        )
    
    with col3:
        error_rate = metrics.get('error_rate', 0) * 100
        st.metric(
            "–ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫", 
            f"{error_rate:.1f}%",
            delta=None
        )
    
    with col4:
        st.metric(
            "–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", 
            int(metrics.get('total_queries', 0)),
            delta=None
        )

def display_risk_analysis(risk_analysis):
    """–û—Ç–æ–±—Ä–∞–∂–∞–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ SQL –∑–∞–ø—Ä–æ—Å–∞"""
    if not risk_analysis:
        return
    
    from advanced_sql_validator import RiskLevel
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ü–≤–µ—Ç –¥–ª—è —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞
    risk_icon = "‚ùì"
    risk_color = "#6c757d"
    risk_text = "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ"
    
    if hasattr(risk_analysis, 'risk_level'):
        risk_level = risk_analysis.risk_level
        if risk_level == RiskLevel.LOW:
            risk_icon = "‚úÖ"
            risk_color = "#28a745"
            risk_text = "–ù–∏–∑–∫–∏–π —Ä–∏—Å–∫"
        elif risk_level == RiskLevel.MEDIUM:
            risk_icon = "‚ö†Ô∏è"
            risk_color = "#ffc107"
            risk_text = "–°—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
        elif risk_level == RiskLevel.HIGH:
            risk_icon = "üî∂"
            risk_color = "#fd7e14"
            risk_text = "–í—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        elif risk_level == RiskLevel.CRITICAL:
            risk_icon = "üö®"
            risk_color = "#dc3545"
            risk_text = "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π —Ä–∏—Å–∫"
    
    # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º —É—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞
    st.markdown(f"""
    <div style="background-color: {risk_color}20; border-left: 4px solid {risk_color}; padding: 10px; margin: 10px 0; border-radius: 4px;">
        <h4 style="margin: 0; color: {risk_color};">
            {risk_icon} –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {risk_text}
        </h4>
    </div>
    """, unsafe_allow_html=True)
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –∞–Ω–∞–ª–∏–∑–∞
    if hasattr(risk_analysis, 'warnings') and risk_analysis.warnings:
        st.warning("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
        for warning in risk_analysis.warnings[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            st.write(f"‚Ä¢ {warning}")
    
    if hasattr(risk_analysis, 'errors') and risk_analysis.errors:
        st.error("‚ùå –û—à–∏–±–∫–∏:")
        for error in risk_analysis.errors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            st.write(f"‚Ä¢ {error}")
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ —Å–ª–æ–∂–Ω–æ—Å—Ç–∏
    if hasattr(risk_analysis, 'complexity_score'):
        col1, col2, col3 = st.columns(3)
        with col1:
            st.metric("–°–ª–æ–∂–Ω–æ—Å—Ç—å", risk_analysis.complexity_score)
        with col2:
            st.metric("JOIN'–æ–≤", getattr(risk_analysis, 'join_count', 0))
        with col3:
            st.metric("–ü–æ–¥–∑–∞–ø—Ä–æ—Å–æ–≤", getattr(risk_analysis, 'subquery_count', 0))
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏
    if hasattr(risk_analysis, 'recommendations') and risk_analysis.recommendations:
        st.info("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
        for rec in risk_analysis.recommendations[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
            st.write(f"‚Ä¢ {rec}")


def create_result_visualization(df, query_type):
    """–°–æ–∑–¥–∞–µ—Ç –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤"""
    if df.empty:
        return None
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –Ω–∞ –æ—Å–Ω–æ–≤–µ –¥–∞–Ω–Ω—ã—Ö
    numeric_cols = df.select_dtypes(include=['number']).columns
    
    if len(numeric_cols) == 0:
        return None
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
    date_cols = [col for col in df.columns if 'date' in col.lower() or '–≤—Ä–µ–º—è' in col.lower()]
    
    if date_cols and len(numeric_cols) > 0:
        # –í—Ä–µ–º–µ–Ω–Ω–æ–π –≥—Ä–∞—Ñ–∏–∫
        fig = px.line(
            df, 
            x=date_cols[0], 
            y=numeric_cols[0],
            title=f"–î–∏–Ω–∞–º–∏–∫–∞ {numeric_cols[0]}",
            template="plotly_white"
        )
        return fig
    
    elif len(df) <= 20 and len(numeric_cols) >= 1:
        # –°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞ –¥–ª—è –Ω–µ–±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤
        if len(df.columns) >= 2:
            x_col = df.columns[0]
            y_col = numeric_cols[0]
            fig = px.bar(
                df, 
                x=x_col, 
                y=y_col,
                title=f"{y_col} –ø–æ {x_col}",
                template="plotly_white"
            )
            return fig
    
    # –°–≤–æ–¥–Ω–∞—è —Ç–∞–±–ª–∏—Ü–∞ –¥–ª—è –±–æ–ª—å—à–∏—Ö –Ω–∞–±–æ—Ä–æ–≤ –¥–∞–Ω–Ω—ã—Ö
    return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.title("BI-GPT Agent")
    st.subheader("Natural Language to SQL Converter")
    
    # –ë–æ–∫–æ–≤–∞—è –ø–∞–Ω–µ–ª—å
    with st.sidebar:
        st.header("Settings")
        
        # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
        model_type = st.selectbox(
            "Select Model:",
            ["Llama 4 API (RunPod)", "Local Fine-tuned (Phi-3)"],
            index=0
        )
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –º–æ–¥–µ–ª–∏
        st.subheader("Model Parameters")
        temperature = st.slider(
            "Temperature", 
            min_value=0.0, 
            max_value=2.0, 
            value=0.0, 
            step=0.1,
            help="–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏. 0.0 = –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–æ, 2.0 = –æ—á–µ–Ω—å —Å–ª—É—á–∞–π–Ω–æ"
        )
        
        max_tokens = st.slider(
            "Max Tokens", 
            min_value=50, 
            max_value=1000, 
            value=400, 
            step=50,
            help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ"
        )
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≤ session state
        st.session_state['temperature'] = temperature
        st.session_state['max_tokens'] = max_tokens
        
        # –ë—ã—Å—Ç—Ä—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
        st.subheader("Quick Settings")
        col1, col2 = st.columns(2)
        
        with col1:
            if st.button("üéØ Precise (0.0, 200)", help="–î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"):
                st.session_state['temperature'] = 0.0
                st.session_state['max_tokens'] = 200
                st.rerun()
            
            if st.button("‚öñÔ∏è Balanced (0.3, 400)", help="–°–±–∞–ª–∞–Ω—Å–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"):
                st.session_state['temperature'] = 0.3
                st.session_state['max_tokens'] = 400
                st.rerun()
        
        with col2:
            if st.button("üé® Creative (0.7, 600)", help="–ö—Ä–µ–∞—Ç–∏–≤–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è"):
                st.session_state['temperature'] = 0.7
                st.session_state['max_tokens'] = 600
                st.rerun()
            
            if st.button("üöÄ Complex (0.1, 800)", help="–î–ª—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"):
                st.session_state['temperature'] = 0.1
                st.session_state['max_tokens'] = 800
                st.rerun()
        
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–∞—é—Ç—Å—è –∏–∑ .env —Ñ–∞–π–ª–∞
        env_url = os.getenv("LOCAL_BASE_URL")
        env_key = os.getenv("LOCAL_API_KEY")
        
        if not env_url or not env_key:
            st.error("‚ö†Ô∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã –≤ .env —Ñ–∞–π–ª–µ!")
            st.write("–°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏:")
            st.code("""LOCAL_API_KEY=your_api_key
LOCAL_BASE_URL=your_api_url""")
            st.stop()
        
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
        if model_type == "Llama 4 API (RunPod)":
            st.info(f"ü¶ô Llama 4 API: {env_url}")
            st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞")
        else:
            st.info(f"ü§ñ Fine-tuned Model: {env_url}")
            st.success("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã –∏–∑ .env —Ñ–∞–π–ª–∞")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ .env
        st.session_state['base_url'] = env_url
        st.session_state['api_key'] = env_key
        
        st.markdown("---")
        
        # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
        st.header("Example Queries")
        example_queries = [
            "–ø–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "–ø—Ä–∏–±—ã–ª—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è",
            "—Å—Ä–µ–¥–Ω–∏–π —á–µ–∫ –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "–æ—Å—Ç–∞—Ç–∫–∏ —Ç–æ–≤–∞—Ä–æ–≤ –Ω–∞ —Å–∫–ª–∞–¥–µ",
            "–∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∑–∞–∫–∞–∑–æ–≤",
            "—Ç–æ–ø 3 –∫–ª–∏–µ–Ω—Ç–∞ –ø–æ –≤—ã—Ä—É—á–∫–µ",
            "—Å—Ä–µ–¥–Ω—è—è –º–∞—Ä–∂–∏–Ω–∞–ª—å–Ω–æ—Å—Ç—å –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            "–∑–∞–∫–∞–∑—ã –∑–∞ —Å–µ–≥–æ–¥–Ω—è",
            "–∫–ª–∏–µ–Ω—Ç—ã –ø—Ä–µ–º–∏—É–º —Å–µ–≥–º–µ–Ω—Ç–∞",
            "—Ç–æ–≤–∞—Ä—ã —Å –Ω–∏–∑–∫–∏–º–∏ –æ—Å—Ç–∞—Ç–∫–∞–º–∏"
        ]
        
        for query in example_queries:
            if st.button(query, key=f"example_{query}"):
                st.session_state['current_query'] = query
        
        st.markdown("---")
        st.header("Business Terms")
        st.markdown("""
        **Supported terms:**
        - Profit, revenue, margin
        - Average check, turnover  
        - Today, last week, last month
        - Orders, customers, products
        - Inventory, warehouse
        """)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∞–≥–µ–Ω—Ç–∞ —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏
    # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ UI –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    api_key = st.session_state.get('api_key') or os.getenv('LOCAL_API_KEY')
    base_url = st.session_state.get('base_url') or os.getenv('LOCAL_BASE_URL')
    
    if not api_key or not base_url:
        st.error("‚ö†Ô∏è API –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã! –ü–æ–∂–∞–ª—É–π—Å—Ç–∞:")
        st.write("1. –ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏, –ò–õ–ò")
        st.write("2. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è LOCAL_API_KEY –∏ LOCAL_BASE_URL, –ò–õ–ò")
        st.write("3. –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª –∏–∑ env.example")
        st.stop()
    
    try:
        agent = init_agent(api_key, base_url)
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")
        st.stop()
    
    # –û—Å–Ω–æ–≤–Ω–∞—è –æ–±–ª–∞—Å—Ç—å
    col1, col2 = st.columns([2, 1])
    
    with col1:
        st.header("Natural Language Query")
        
        # –ü–æ–ª–µ –≤–≤–æ–¥–∞ –∑–∞–ø—Ä–æ—Å–∞
        user_query = st.text_area(
            "Enter your question:",
            value=st.session_state.get('current_query', ''),
            height=100,
            placeholder="Example: –ø–æ–∫–∞–∂–∏ –ø—Ä–∏–±—ã–ª—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è"
        )
        
        # –ö–Ω–æ–ø–∫–∏ –¥–µ–π—Å—Ç–≤–∏–π
        col_btn1, col_btn2, col_btn3 = st.columns(3)
        
        with col_btn1:
            process_btn = st.button("Execute Query", type="primary")
        
        with col_btn2:
            if st.button("Clear"):
                st.session_state['current_query'] = ''
                st.rerun()
        
        with col_btn3:
            if st.button("Show DB Schema"):
                st.session_state['show_schema'] = True
    
    with col2:
        st.header("Performance Metrics")
        display_metrics_dashboard(agent)
    
    # –û–±—Ä–∞–±–æ—Ç–∫–∞ –∑–∞–ø—Ä–æ—Å–∞
    if process_btn and user_query.strip():
        with st.spinner("Processing query and generating SQL..."):
            start_time = time.time()
            # –ü–æ–ª—É—á–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏ –∏–∑ session state
            temperature = st.session_state.get('temperature', 0.0)
            max_tokens = st.session_state.get('max_tokens', 400)
            result = agent.process_query(user_query, temperature=temperature, max_tokens=max_tokens)
            processing_time = time.time() - start_time
        
        # –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
        if 'error' in result:
            st.error(f"Error: {result['error']}")
            if result.get('sql'):
                st.code(result['sql'], language='sql')
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –¥–∞–∂–µ –¥–ª—è –æ—à–∏–±–æ–∫
            if result.get('risk_analysis'):
                display_risk_analysis(result['risk_analysis'])
        else:
            st.success("Query executed successfully")
            
            # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –ø–µ—Ä–µ–¥ –≤–∫–ª–∞–¥–∫–∞–º–∏
            if result.get('risk_analysis'):
                display_risk_analysis(result['risk_analysis'])
            
            # –í–∫–ª–∞–¥–∫–∏ –¥–ª—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
            tab1, tab2, tab3, tab4 = st.tabs(["Results", "SQL", "Visualization", "Analysis"])
            
            with tab1:
                st.subheader("Query Results")
                df = result['results']
                
                if df.empty:
                    st.info("No data returned")
                else:
                    st.dataframe(df, use_container_width=True)
                    
                    # –ë–∞–∑–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                    if len(df) > 0:
                        col_stat1, col_stat2 = st.columns(2)
                        with col_stat1:
                            st.metric("Rows", len(df))
                        with col_stat2:
                            st.metric("Columns", len(df.columns))
            
            with tab2:
                st.subheader("Generated SQL")
                st.code(result['sql'], language='sql')
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –º–æ–¥–µ–ª–∏
                col_param1, col_param2 = st.columns(2)
                with col_param1:
                    st.metric("Temperature", f"{temperature:.1f}")
                with col_param2:
                    st.metric("Max Tokens", max_tokens)
                
                # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–∏–∑–Ω–µ—Å-—Ç–µ—Ä–º–∏–Ω–∞—Ö
                if result.get('business_terms'):
                    st.subheader("Business Terms Used")
                    for term in result['business_terms']:
                        st.text(f"- {term}")
            
            with tab3:
                st.subheader("–í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –¥–∞–Ω–Ω—ã—Ö")
                if not result['results'].empty:
                    fig = create_result_visualization(result['results'], user_query)
                    if fig:
                        st.plotly_chart(fig, use_container_width=True)
                    else:
                        st.info("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ –¥–ª—è –¥–∞–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –¥–∞–Ω–Ω—ã—Ö")
                        
                        # –ü—Ä–µ–¥–ª–æ–∂–µ–Ω–∏–µ —Ä—É—á–Ω–æ–π –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                        numeric_cols = result['results'].select_dtypes(include=['number']).columns
                        if len(numeric_cols) > 0:
                            st.subheader("–†—É—á–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –≥—Ä–∞—Ñ–∏–∫–∞")
                            chart_type = st.selectbox("–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞", ["–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫"])
                            
                            if chart_type == "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞" and len(result['results']) <= 50:
                                x_axis = st.selectbox("–û—Å—å X", result['results'].columns)
                                y_axis = st.selectbox("–û—Å—å Y", numeric_cols)
                                
                                if st.button("–ü–æ—Å—Ç—Ä–æ–∏—Ç—å –≥—Ä–∞—Ñ–∏–∫"):
                                    fig = px.bar(result['results'], x=x_axis, y=y_axis)
                                    st.plotly_chart(fig, use_container_width=True)
                else:
                    st.info("–ù–µ—Ç –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏")
            
            with tab4:
                st.subheader("üß† –ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π –∞–Ω–∞–ª–∏–∑")
                st.write(result.get('explanation', '–ê–Ω–∞–ª–∏–∑ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω'))
                
                # –ú–µ—Ç—Ä–∏–∫–∏ –∑–∞–ø—Ä–æ—Å–∞
                if result.get('metrics'):
                    metrics = result['metrics']
                    
                    metric_col1, metric_col2, metric_col3 = st.columns(3)
                    with metric_col1:
                        st.metric("–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", f"{metrics.execution_time:.2f}s")
                    with metric_col2:
                        st.metric("–ë–∏–∑–Ω–µ—Å-—Ç–µ—Ä–º–∏–Ω—ã", metrics.business_terms_used)
                    with metric_col3:
                        st.metric("–¢–æ—á–Ω–æ—Å—Ç—å", f"{metrics.aggregation_accuracy:.1%}")
    
    # –ü–æ–∫–∞–∑ —Å—Ö–µ–º—ã –ë–î
    if st.session_state.get('show_schema'):
        st.header("üóÑÔ∏è –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
        
        schema_info = {
            "orders": ["id", "customer_id", "order_date", "amount", "status"],
            "customers": ["id", "name", "email", "registration_date", "segment"],
            "products": ["id", "name", "category", "price", "cost"],
            "sales": ["id", "order_id", "product_id", "quantity", "revenue", "costs"],
            "inventory": ["id", "product_id", "current_stock", "warehouse"]
        }
        
        for table, columns in schema_info.items():
            with st.expander(f"üìã –¢–∞–±–ª–∏—Ü–∞: {table}"):
                st.write("**–ü–æ–ª—è:**")
                for col in columns:
                    st.write(f"‚Ä¢ {col}")
        
        if st.button("–°–∫—Ä—ã—Ç—å —Å—Ö–µ–º—É"):
            st.session_state['show_schema'] = False
            st.rerun()
    
    # –§—É—Ç–µ—Ä
    st.markdown("---")
    st.markdown("""
    <div style='text-align: center; color: #666;'>
        ü§ñ BI-GPT Agent |
        üíº –ë–∏–∑–Ω–µ—Å-—Ü–µ–Ω–Ω–æ—Å—Ç—å ‚Ä¢ üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å ‚Ä¢ üéØ –¢–æ—á–Ω–æ—Å—Ç—å ML/AI
    </div>
    """, unsafe_allow_html=True)

if __name__ == "__main__":
    main()
