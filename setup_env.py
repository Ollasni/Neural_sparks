#!/usr/bin/env python3
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è BI-GPT Agent
–ü–æ–º–æ–≥–∞–µ—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏ –∏ –¥—Ä—É–≥–∏–µ —Å–µ–∫—Ä–µ—Ç—ã
"""

import os
import shutil
from pathlib import Path
import getpass


def setup_environment():
    """–ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("üîß –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è BI-GPT Agent")
    print("=" * 50)
    
    env_file = Path(".env")
    env_example = Path("env.example")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø—Ä–∏–º–µ—Ä–∞
    if not env_example.exists():
        print("‚ùå –§–∞–π–ª env.example –Ω–µ –Ω–∞–π–¥–µ–Ω!")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–π .env
    if env_file.exists():
        print("‚ö†Ô∏è  –§–∞–π–ª .env —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
        overwrite = input("–•–æ—Ç–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞—Ç—å –µ–≥–æ? (y/N): ").lower()
        if overwrite != 'y':
            print("–û—Ç–º–µ–Ω–µ–Ω–æ")
            return False
        
        # –°–æ–∑–¥–∞–µ–º –±—ç–∫–∞–ø
        backup_file = Path(f".env.backup.{env_file.stat().st_mtime_ns}")
        shutil.copy2(env_file, backup_file)
        print(f"‚úÖ –°–æ–∑–¥–∞–Ω –±—ç–∫–∞–ø: {backup_file}")
    
    # –ö–æ–ø–∏—Ä—É–µ–º –ø—Ä–∏–º–µ—Ä
    shutil.copy2(env_example, env_file)
    print(f"‚úÖ –°–æ–∑–¥–∞–Ω —Ñ–∞–π–ª .env –∏–∑ –ø—Ä–∏–º–µ—Ä–∞")
    
    # –ò–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –∫–ª—é—á–µ–≤—ã—Ö –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
    print("\nüîë –ù–∞—Å—Ç—Ä–æ–π–∫–∞ API –∫–ª—é—á–µ–π:")
    
    # –í—ã–±–æ—Ä –ø—Ä–æ–≤–∞–π–¥–µ—Ä–∞ –º–æ–¥–µ–ª–∏
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –ø—Ä–æ–≤–∞–π–¥–µ—Ä –º–æ–¥–µ–ª–∏:")
    print("1. Local Model (Llama-4-Scout)")
    print("2. OpenAI GPT-4")
    
    while True:
        choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
        if choice in ['1', '2']:
            break
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2")
    
    env_vars = {}
    
    if choice == '1':
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏
        env_vars['MODEL_PROVIDER'] = 'local'
        
        print("\nüì° –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–π –º–æ–¥–µ–ª–∏:")
        
        # API –∫–ª—é—á
        while True:
            api_key = getpass.getpass("LOCAL_API_KEY (—Å–∫—Ä—ã—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ): ").strip()
            if api_key:
                env_vars['LOCAL_API_KEY'] = api_key
                break
            print("API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        # Base URL
        while True:
            base_url = input("LOCAL_BASE_URL: ").strip()
            if base_url and (base_url.startswith('http://') or base_url.startswith('https://')):
                env_vars['LOCAL_BASE_URL'] = base_url
                break
            print("–í–≤–µ–¥–∏—Ç–µ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π URL (http:// –∏–ª–∏ https://)")
        
        # –ú–æ–¥–µ–ª—å
        model_name = input("LOCAL_MODEL_NAME [llama4scout]: ").strip()
        env_vars['LOCAL_MODEL_NAME'] = model_name or 'llama4scout'
        
    else:
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI
        env_vars['MODEL_PROVIDER'] = 'openai'
        
        print("\nü§ñ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ OpenAI:")
        
        while True:
            api_key = getpass.getpass("OPENAI_API_KEY (—Å–∫—Ä—ã—Ç –ø—Ä–∏ –≤–≤–æ–¥–µ): ").strip()
            if api_key:
                env_vars['OPENAI_API_KEY'] = api_key
                break
            print("API –∫–ª—é—á –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –ø—É—Å—Ç—ã–º")
        
        model = input("OPENAI_MODEL [gpt-4]: ").strip()
        env_vars['OPENAI_MODEL'] = model or 'gpt-4'
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    print("\n‚öôÔ∏è  –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏:")
    
    # –û–∫—Ä—É–∂–µ–Ω–∏–µ
    print("\n–í—ã–±–µ—Ä–∏—Ç–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ:")
    print("1. Development")
    print("2. Production")
    
    while True:
        env_choice = input("–í–∞—à –≤—ã–±–æ—Ä (1-2): ").strip()
        if env_choice in ['1', '2']:
            break
        print("–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –≤–≤–µ–¥–∏—Ç–µ 1 –∏–ª–∏ 2")
    
    env_vars['APP_ENVIRONMENT'] = 'development' if env_choice == '1' else 'production'
    
    # –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
    if env_choice == '1':
        env_vars['LOG_LEVEL'] = 'DEBUG'
        env_vars['DEBUG_MODE'] = 'true'
    else:
        env_vars['LOG_LEVEL'] = 'INFO'
        env_vars['DEBUG_MODE'] = 'false'
    
    # –ü—Ä–∏–º–µ–Ω—è–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏—è –∫ .env —Ñ–∞–π–ª—É
    print("\nüíæ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    
    with open(env_file, 'r', encoding='utf-8') as f:
        content = f.read()
    
    for key, value in env_vars.items():
        # –ó–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏—è –≤ —Ñ–∞–π–ª–µ
        if f"{key}=" in content:
            # –ù–∞—Ö–æ–¥–∏–º —Å—Ç—Ä–æ–∫—É –∏ –∑–∞–º–µ–Ω—è–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ
            lines = content.split('\n')
            for i, line in enumerate(lines):
                if line.strip().startswith(f"{key}=") and not line.strip().startswith('#'):
                    lines[i] = f"{key}={value}"
                    break
            content = '\n'.join(lines)
        else:
            # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é
            content += f"\n{key}={value}"
    
    with open(env_file, 'w', encoding='utf-8') as f:
        f.write(content)
    
    print("‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ .env —Ñ–∞–π–ª")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫
    print("\nüß™ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—Å—Ç—Ä–æ–µ–∫...")
    
    try:
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –∏–∑ .env
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    os.environ[key] = value
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        try:
            from config import get_settings, validate_config
            
            settings = get_settings()
            errors = validate_config()
            
            if errors:
                print("‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –≤ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
                for error in errors:
                    print(f"   - {error}")
            else:
                print("‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
                
            print(f"‚úÖ –ü—Ä–æ–≤–∞–π–¥–µ—Ä –º–æ–¥–µ–ª–∏: {settings.model_provider.value}")
            print(f"‚úÖ –û–∫—Ä—É–∂–µ–Ω–∏–µ: {settings.environment.value}")
            
        except ImportError:
            print("‚ö†Ô∏è  –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ—Ç pydantic)")
            print("‚úÖ –ë–∞–∑–æ–≤–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞")
            
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ: {e}")
        return False
    
    # –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é
    print("\nüöÄ –ì–æ—Ç–æ–≤–æ! –ò–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
    print("=" * 50)
    print("1. –ó–∞–ø—É—Å–∫ –≤–µ–±-–∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:")
    print("   python3 start_system.py")
    print("")
    print("2. –ó–∞–ø—É—Å–∫ –∏–∑ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏:")
    print("   python3 bi_gpt_agent.py --query '–ø–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤'")
    print("")
    print("3. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ:")
    print("   python3 simple_demo.py")
    print("")
    print("üîí –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å:")
    print("   - –§–∞–π–ª .env –¥–æ–±–∞–≤–ª–µ–Ω –≤ .gitignore")
    print("   - –ù–µ –ø—É–±–ª–∏–∫—É–π—Ç–µ API –∫–ª—é—á–∏ –≤ —Ä–µ–ø–æ–∑–∏—Ç–æ—Ä–∏–∏")
    print("   - –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ä–∞–∑–Ω—ã–µ –∫–ª—é—á–∏ –¥–ª—è dev/prod")
    
    return True


def show_current_config():
    """–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ç–µ–∫—É—â—É—é –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é (–±–µ–∑ —Å–µ–∫—Ä–µ—Ç–æ–≤)"""
    print("üìã –¢–µ–∫—É—â–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:")
    print("=" * 30)
    
    env_file = Path(".env")
    if not env_file.exists():
        print("‚ùå –§–∞–π–ª .env –Ω–µ –Ω–∞–π–¥–µ–Ω")
        print("–ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 setup_env.py")
        return
    
    try:
        with open(env_file, 'r', encoding='utf-8') as f:
            for line in f:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    
                    # –°–∫—Ä—ã–≤–∞–µ–º —Å–µ–∫—Ä–µ—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è
                    if any(secret in key.upper() for secret in ['KEY', 'SECRET', 'PASSWORD', 'TOKEN']):
                        if value:
                            display_value = value[:4] + '*' * (len(value) - 4) if len(value) > 4 else '***'
                        else:
                            display_value = '<–Ω–µ –∑–∞–¥–∞–Ω–æ>'
                    else:
                        display_value = value or '<–Ω–µ –∑–∞–¥–∞–Ω–æ>'
                    
                    print(f"   {key}: {display_value}")
                    
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")


def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    import sys
    
    if len(sys.argv) > 1 and sys.argv[1] == 'show':
        show_current_config()
        return
    
    print("üîß BI-GPT Agent - –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    print("")
    print("–≠—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç –ø–æ–º–æ–∂–µ—Ç –≤–∞–º –±–µ–∑–æ–ø–∞—Å–Ω–æ –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å API –∫–ª—é—á–∏")
    print("–∏ –¥—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–ª—è BI-GPT Agent.")
    print("")
    
    if input("–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (y/N): ").lower() != 'y':
        print("–û—Ç–º–µ–Ω–µ–Ω–æ")
        return
    
    try:
        success = setup_environment()
        if success:
            print("\nüéâ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
        else:
            print("\n‚ùå –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –Ω–µ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
            sys.exit(1)
            
    except KeyboardInterrupt:
        print("\n\nüëã –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)


if __name__ == "__main__":
    main()
