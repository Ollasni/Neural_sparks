#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π BI-GPT Agent
–ü–æ–∫–∞–∑—ã–≤–∞–µ—Ç —Ä–∞–±–æ—Ç—É –Ω–æ–≤—ã—Ö —Å–∏—Å—Ç–µ–º: –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏, –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SQL –∏ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫
"""

import os
import sys
from pathlib import Path

# –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ –ø—É—Ç—å
sys.path.insert(0, str(Path(__file__).parent))

def demo_config_system():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("="*60)
    print("üîß –î–ï–ú–û: –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("="*60)
    
    try:
        from config import get_settings, validate_config, config_manager
        
        settings = get_settings()
        print(f"‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã:")
        print(f"   - –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {settings.app_name} v{settings.app_version}")
        print(f"   - –û–∫—Ä—É–∂–µ–Ω–∏–µ: {settings.environment.value}")
        print(f"   - –ü—Ä–æ–≤–∞–π–¥–µ—Ä –º–æ–¥–µ–ª–∏: {settings.model_provider.value}")
        print(f"   - –ë–∞–∑–∞ –¥–∞–Ω–Ω—ã—Ö: {settings.database_url}")
        print(f"   - –õ–æ–≥-—Ñ–∞–π–ª: {settings.log_file}")
        
        # –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print(f"\nüîç –í–∞–ª–∏–¥–∞—Ü–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        errors = validate_config()
        if errors:
            print(f"   ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
            for error in errors:
                print(f"     - {error}")
        else:
            print(f"   ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
        
        # –°–≤–æ–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
        print(f"\nüìä –°–≤–æ–¥–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
        summary = config_manager.get_config_summary()
        for section, data in summary.items():
            print(f"   {section}:")
            for key, value in data.items():
                if isinstance(value, dict):
                    continue
                print(f"     - {key}: {value}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏: {e}")
        return False


def demo_logging_system():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —Å–∏—Å—Ç–µ–º—ã –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("\n" + "="*60)
    print("üìù –î–ï–ú–û: –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è")
    print("="*60)
    
    try:
        from logging_config import get_logger, setup_logging, log_exception, log_performance, log_user_action
        from exceptions import ValidationError, create_error_context
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ
        setup_logging()
        logger = get_logger('demo')
        
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω–∞")
        
        # –î–µ–º–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –ª–æ–≥–æ–≤
        logger.info("–≠—Ç–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–æ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        logger.warning("–≠—Ç–æ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ")
        
        # –î–µ–º–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        log_user_action(
            'demo_action',
            user_id='demo_user',
            session_id='demo_session',
            details={'feature': 'logging_demo'}
        )
        print(f"‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–µ–π—Å—Ç–≤–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        
        # –î–µ–º–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
        log_performance(
            'demo_operation',
            0.123,
            success=True,
            extra_data={'rows_processed': 100}
        )
        print(f"‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
        
        # –î–µ–º–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        try:
            raise ValidationError(
                "–î–µ–º–æ –æ—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏",
                field="demo_field",
                value="invalid_value",
                context=create_error_context(
                    user_id='demo_user',
                    query='demo query'
                )
            )
        except ValidationError as e:
            log_exception(e, 'demo')
            print(f"‚úÖ –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–π —Å –∫–æ–Ω—Ç–µ–∫—Å—Ç–æ–º")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è: {e}")
        return False


def demo_sql_validation():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–æ–¥–≤–∏–Ω—É—Ç–æ–π –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SQL"""
    print("\n" + "="*60)
    print("üõ°Ô∏è  –î–ï–ú–û: –ü—Ä–æ–¥–≤–∏–Ω—É—Ç–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è SQL")
    print("="*60)
    
    try:
        from advanced_sql_validator import validate_sql_query, ValidationResult
        
        # –¢–µ—Å—Ç–æ–≤—ã–µ SQL –∑–∞–ø—Ä–æ—Å—ã —Ä–∞–∑–Ω–æ–π —Å–ª–æ–∂–Ω–æ—Å—Ç–∏ –∏ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏
        test_queries = [
            {
                'name': '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å',
                'sql': 'SELECT * FROM customers LIMIT 100',
                'expected': 'allowed'
            },
            {
                'name': '–ë–µ–∑–æ–ø–∞—Å–Ω—ã–π —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
                'sql': 'SELECT c.name, AVG(o.amount) FROM customers c JOIN orders o ON c.id = o.customer_id GROUP BY c.name LIMIT 50',
                'expected': 'allowed'
            },
            {
                'name': '–û–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å (DROP)',
                'sql': 'DROP TABLE customers',
                'expected': 'blocked'
            },
            {
                'name': 'SQL –∏–Ω—ä–µ–∫—Ü–∏—è',
                'sql': "SELECT * FROM users WHERE id = 1 OR 1=1",
                'expected': 'blocked'
            },
            {
                'name': '–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å',
                'sql': 'SELECT * FROM t1 JOIN t2 ON t1.id = t2.id JOIN t3 ON t2.id = t3.id JOIN t4 ON t3.id = t4.id JOIN t5 ON t4.id = t5.id JOIN t6 ON t5.id = t6.id',
                'expected': 'blocked'
            },
            {
                'name': '–ó–∞–ø—Ä–æ—Å —Å –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è–º–∏',
                'sql': 'SELECT * FROM information_schema.tables',
                'expected': 'warning'
            }
        ]
        
        print(f"üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {len(test_queries)} SQL –∑–∞–ø—Ä–æ—Å–æ–≤:")
        
        passed = 0
        for i, test in enumerate(test_queries, 1):
            print(f"\n{i}. {test['name']}")
            print(f"   SQL: {test['sql'][:60]}{'...' if len(test['sql']) > 60 else ''}")
            
            analysis = validate_sql_query(test['sql'])
            
            print(f"   –†–µ–∑—É–ª—å—Ç–∞—Ç: {analysis.validation_result.value}")
            print(f"   –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {analysis.risk_level.value}")
            print(f"   –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis.complexity_score}")
            
            if analysis.errors:
                print(f"   –û—à–∏–±–∫–∏: {len(analysis.errors)}")
                for error in analysis.errors[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                    print(f"     - {error}")
            
            if analysis.warnings:
                print(f"   –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è: {len(analysis.warnings)}")
                for warning in analysis.warnings[:2]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 2
                    print(f"     - {warning}")
            
            if analysis.recommendations:
                print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(analysis.recommendations)}")
                for rec in analysis.recommendations[:1]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—É—é
                    print(f"     - {rec}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤–∏–µ –æ–∂–∏–¥–∞–Ω–∏—è–º
            result_map = {
                ValidationResult.ALLOWED: 'allowed',
                ValidationResult.WARNING: 'warning',
                ValidationResult.BLOCKED: 'blocked'
            }
            
            actual = result_map.get(analysis.validation_result, 'unknown')
            if actual == test['expected'] or (actual == 'warning' and test['expected'] == 'allowed'):
                print(f"   ‚úÖ –¢–µ—Å—Ç –ø—Ä–æ–π–¥–µ–Ω")
                passed += 1
            else:
                print(f"   ‚ùå –¢–µ—Å—Ç –Ω–µ –ø—Ä–æ–π–¥–µ–Ω (–æ–∂–∏–¥–∞–ª–∏: {test['expected']}, –ø–æ–ª—É—á–∏–ª–∏: {actual})")
        
        print(f"\nüìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤–∞–ª–∏–¥–∞—Ü–∏–∏: {passed}/{len(test_queries)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
        return passed == len(test_queries)
        
    except ImportError as e:
        print(f"‚ùå –°–∏—Å—Ç–µ–º–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SQL –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ –≤–∞–ª–∏–¥–∞—Ü–∏–∏ SQL: {e}")
        return False


def demo_exception_handling():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω–æ–π –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ—à–∏–±–æ–∫"""
    print("\n" + "="*60)
    print("‚ö†Ô∏è  –î–ï–ú–û: –û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π")
    print("="*60)
    
    try:
        from exceptions import (
            ValidationError, SecurityError, SQLValidationError, ModelError,
            DatabaseError, PerformanceError, NetworkError,
            create_error_context, handle_exception
        )
        
        print(f"‚úÖ –°–∏—Å—Ç–µ–º–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –∑–∞–≥—Ä—É–∂–µ–Ω–∞")
        
        # –î–µ–º–æ —Ä–∞–∑–ª–∏—á–Ω—ã—Ö —Ç–∏–ø–æ–≤ –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        exception_demos = [
            {
                'name': '–û—à–∏–±–∫–∞ –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                'exception': ValidationError(
                    "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç email",
                    field="email",
                    value="invalid-email"
                )
            },
            {
                'name': '–û—à–∏–±–∫–∞ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏',
                'exception': SecurityError(
                    "–û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ SQL –∏–Ω—ä–µ–∫—Ü–∏—è",
                    threat_type="sql_injection"
                )
            },
            {
                'name': '–û—à–∏–±–∫–∞ SQL –≤–∞–ª–∏–¥–∞—Ü–∏–∏',
                'exception': SQLValidationError(
                    "–°–ª–∏—à–∫–æ–º —Å–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å",
                    sql_query="SELECT * FROM table1 JOIN table2 ..."
                )
            },
            {
                'name': '–û—à–∏–±–∫–∞ –º–æ–¥–µ–ª–∏',
                'exception': ModelError(
                    "–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç —Ç–æ–∫–µ–Ω–æ–≤",
                    model_name="gpt-4"
                )
            }
        ]
        
        for demo in exception_demos:
            print(f"\nüîç {demo['name']}:")
            exc = demo['exception']
            
            print(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {exc.error_code}")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {exc.category.value}")
            print(f"   –°–µ—Ä—å–µ–∑–Ω–æ—Å—Ç—å: {exc.severity.value}")
            print(f"   –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: {exc.user_message}")
            print(f"   –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏: {len(exc.recovery_suggestions)}")
            
            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ
            error_dict = exc.to_dict()
            print(f"   –°—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ: {len(error_dict)} –ø–æ–ª–µ–π")
        
        # –î–µ–º–æ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –æ–±—ã—á–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
        print(f"\nüîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±—ã—á–Ω–æ–≥–æ –∏—Å–∫–ª—é—á–µ–Ω–∏—è:")
        try:
            raise ValueError("–û–±—ã—á–Ω–∞—è –æ—à–∏–±–∫–∞ Python")
        except ValueError as e:
            bi_exception = handle_exception(
                e,
                context=create_error_context(
                    user_id='demo_user',
                    query='demo query'
                )
            )
            print(f"   –ü—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–æ –≤: {type(bi_exception).__name__}")
            print(f"   –ö–æ–¥ –æ—à–∏–±–∫–∏: {bi_exception.error_code}")
            print(f"   –ö–∞—Ç–µ–≥–æ—Ä–∏—è: {bi_exception.category.value}")
        
        return True
        
    except ImportError as e:
        print(f"‚ùå –°–∏—Å—Ç–µ–º–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞: {e}")
        return False
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–º–æ –∏—Å–∫–ª—é—á–µ–Ω–∏–π: {e}")
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ BI-GPT Agent - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è —É–ª—É—á—à–µ–Ω–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π")
    print("="*60)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–±–æ—á—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
    current_dir = Path.cwd()
    print(f"üìÅ –†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {current_dir}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç—Ä–µ–±—É–µ–º—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = ['config.py', 'exceptions.py', 'logging_config.py', 'advanced_sql_validator.py']
    missing_files = []
    for file in required_files:
        if not (current_dir / file).exists():
            missing_files.append(file)
    
    if missing_files:
        print(f"‚ùå –û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –≤ –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏")
        return 1
    
    print(f"‚úÖ –í—Å–µ —Ç—Ä–µ–±—É–µ–º—ã–µ —Ñ–∞–π–ª—ã –Ω–∞–π–¥–µ–Ω—ã")
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏
    demos = [
        ('–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏', demo_config_system),
        ('–°–∏—Å—Ç–µ–º–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è', demo_logging_system),
        ('–í–∞–ª–∏–¥–∞—Ü–∏—è SQL', demo_sql_validation),
        ('–û–±—Ä–∞–±–æ—Ç–∫–∞ –∏—Å–∫–ª—é—á–µ–Ω–∏–π', demo_exception_handling)
    ]
    
    results = []
    for name, demo_func in demos:
        try:
            success = demo_func()
            results.append((name, success))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ –¥–µ–º–æ '{name}': {e}")
            results.append((name, False))
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "="*60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢")
    print("="*60)
    
    passed = 0
    for name, success in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù–û" if success else "‚ùå –ù–ï –ü–†–û–ô–î–ï–ù–û"
        print(f"{status} - {name}")
        if success:
            passed += 1
    
    success_rate = (passed / len(results)) * 100
    print(f"\nüéØ –û–±—â–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} ({success_rate:.1f}%)")
    
    if success_rate >= 75:
        print("üèÜ –û—Ç–ª–∏—á–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç! –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ —Å–∏—Å—Ç–µ–º—ã —Ä–∞–±–æ—Ç–∞—é—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    elif success_rate >= 50:
        print("‚ö†Ô∏è  –•–æ—Ä–æ—à–∏–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç, –Ω–æ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –Ω–µ–∫–æ—Ç–æ—Ä—ã–º–∏ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç–∞–º–∏.")
    else:
        print("üö® –ú–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–ª–µ–º—ã. –¢—Ä–µ–±—É–µ—Ç—Å—è –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞.")
    
    print(f"\nüí° –î–ª—è –ø–æ–ª–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏:")
    print(f"   pip install -r requirements.txt")
    
    return 0 if success_rate >= 75 else 1


if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\nüëã –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø—Ä–µ—Ä–≤–∞–Ω–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
