#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π BI-GPT Agent:
- –û—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —É—Ä–æ–≤–Ω—è —Ä–∏—Å–∫–∞ –¥–ª—è –≤—Å–µ—Ö SQL –∑–∞–ø—Ä–æ—Å–æ–≤
- –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ (temperature, max_tokens)
- –†–∞—Å—à–∏—Ä–µ–Ω–Ω–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è –±–µ–∑ –±–ª–æ–∫–∏—Ä–æ–≤–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
"""

import sys
import os
sys.path.append(os.path.dirname(__file__))

from bi_gpt_agent import BIGPTAgent
from advanced_sql_validator import validate_sql_query, RiskLevel

def demo_risk_analysis():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –¥–ª—è —Ä–∞–∑–ª–∏—á–Ω—ã—Ö SQL –∑–∞–ø—Ä–æ—Å–æ–≤"""
    
    print("üîç –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–∞ SQL –∑–∞–ø—Ä–æ—Å–æ–≤")
    print("=" * 50)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
    try:
        agent = BIGPTAgent()
        print("‚úÖ BI-GPT Agent –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω")
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏: {e}")
        return
    
    # –¢–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã —Å —Ä–∞–∑–Ω—ã–º —É—Ä–æ–≤–Ω–µ–º —Ä–∏—Å–∫–∞
    test_queries = [
        {
            "query": "–ø–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤",
            "description": "–ü—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å - –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫"
        },
        {
            "query": "–ø–æ–∫–∞–∂–∏ –ø—Ä–∏–±—ã–ª—å –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 2 –¥–Ω—è —Å –≥—Ä—É–ø–ø–∏—Ä–æ–≤–∫–æ–π –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º",
            "description": "–°–ª–æ–∂–Ω—ã–π –∑–∞–ø—Ä–æ—Å —Å JOIN - —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫"
        },
        {
            "query": "—É–¥–∞–ª–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –±–µ–∑ –∑–∞–∫–∞–∑–æ–≤",
            "description": "DELETE –∑–∞–ø—Ä–æ—Å - –≤—ã—Å–æ–∫–∏–π —Ä–∏—Å–∫"
        },
        {
            "query": "DROP TABLE customers",
            "description": "–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∏–π –∑–∞–ø—Ä–æ—Å - –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω"
        }
    ]
    
    for i, test_case in enumerate(test_queries, 1):
        print(f"\nüìù –¢–µ—Å—Ç {i}: {test_case['description']}")
        print(f"–ó–∞–ø—Ä–æ—Å: {test_case['query']}")
        print("-" * 30)
        
        try:
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL
            result = agent.process_query(test_case['query'])
            
            if 'error' in result:
                print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
            else:
                print(f"‚úÖ SQL —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω: {result['sql']}")
            
            # –ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ–º —Ä–∏—Å–∫
            if result.get('risk_analysis'):
                analysis = result['risk_analysis']
                
                # –ü–æ–ª—É—á–∞–µ–º –∏–∫–æ–Ω–∫—É –∏ —Ü–≤–µ—Ç
                risk_icon = "‚ùì"
                risk_color = "#6c757d"
                
                if analysis.risk_level == RiskLevel.LOW:
                    risk_icon = "‚úÖ"
                    risk_color = "#28a745"
                elif analysis.risk_level == RiskLevel.MEDIUM:
                    risk_icon = "‚ö†Ô∏è"
                    risk_color = "#ffc107"
                elif analysis.risk_level == RiskLevel.HIGH:
                    risk_icon = "üî∂"
                    risk_color = "#fd7e14"
                elif analysis.risk_level == RiskLevel.CRITICAL:
                    risk_icon = "üö®"
                    risk_color = "#dc3545"
                
                print(f"{risk_icon} –£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞: {analysis.risk_level.value.upper()}")
                print(f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis.complexity_score}")
                print(f"üîó JOIN'–æ–≤: {analysis.join_count}")
                print(f"üìã –ü–æ–¥–∑–∞–ø—Ä–æ—Å–æ–≤: {analysis.subquery_count}")
                
                if analysis.warnings:
                    print("‚ö†Ô∏è –ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:")
                    for warning in analysis.warnings[:3]:
                        print(f"  ‚Ä¢ {warning}")
                
                if analysis.errors:
                    print("‚ùå –û—à–∏–±–∫–∏:")
                    for error in analysis.errors[:3]:
                        print(f"  ‚Ä¢ {error}")
                
                if analysis.recommendations:
                    print("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:")
                    for rec in analysis.recommendations[:3]:
                        print(f"  ‚Ä¢ {rec}")
            else:
                print("‚ÑπÔ∏è –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–∞ –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω")
                
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –æ–±—Ä–∞–±–æ—Ç–∫–∏: {e}")
        
        print()

def demo_model_parameters():
    """–î–µ–º–æ–Ω—Å—Ç—Ä–∏—Ä—É–µ—Ç –≤–ª–∏—è–Ω–∏–µ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏ –Ω–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏—é"""
    
    print("\nüéõÔ∏è –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏")
    print("=" * 50)
    
    try:
        agent = BIGPTAgent()
        
        test_query = "–ø–æ–∫–∞–∂–∏ —Ç–æ–ø –∫–ª–∏–µ–Ω—Ç–æ–≤ –ø–æ –≤—ã—Ä—É—á–∫–µ"
        
        # –†–∞–∑–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤
        parameter_sets = [
            {"temperature": 0.0, "max_tokens": 200, "name": "Precise"},
            {"temperature": 0.3, "max_tokens": 400, "name": "Balanced"},
            {"temperature": 0.7, "max_tokens": 600, "name": "Creative"},
            {"temperature": 0.1, "max_tokens": 800, "name": "Complex"}
        ]
        
        for params in parameter_sets:
            print(f"\nüîß {params['name']} (T={params['temperature']}, Tokens={params['max_tokens']})")
            print("-" * 40)
            
            try:
                result = agent.process_query(
                    test_query, 
                    temperature=params['temperature'],
                    max_tokens=params['max_tokens']
                )
                
                if 'error' in result:
                    print(f"‚ùå –û—à–∏–±–∫–∞: {result['error']}")
                else:
                    print(f"‚úÖ SQL: {result['sql']}")
                    
                    if result.get('risk_analysis'):
                        analysis = result['risk_analysis']
                        print(f"üìä –°–ª–æ–∂–Ω–æ—Å—Ç—å: {analysis.complexity_score}")
                        print(f"üéØ –†–∏—Å–∫: {analysis.risk_level.value}")
                
            except Exception as e:
                print(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞: {e}")

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏"""
    print("üöÄ BI-GPT Agent - –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–µ–π")
    print("=" * 60)
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∞–Ω–∞–ª–∏–∑–∞ —Ä–∏—Å–∫–∞
    demo_risk_analysis()
    
    # –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –º–æ–¥–µ–ª–∏
    demo_model_parameters()
    
    print("\n‚úÖ –î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!")
    print("\nüí° –¢–µ–ø–µ—Ä—å –∑–∞–ø—É—Å—Ç–∏—Ç–µ Streamlit –¥–ª—è –∏–Ω—Ç–µ—Ä–∞–∫—Ç–∏–≤–Ω–æ–≥–æ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞:")
    print("   streamlit run streamlit_app.py")

if __name__ == "__main__":
    main()

