#!/usr/bin/env python3
"""
–¢–µ—Å—Ç–æ–≤—ã–π —Å–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–≥–æ –∏–∑–≤–ª–µ—á–µ–Ω–∏—è —Å—Ö–µ–º—ã
"""

import os
import sys
import logging

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(level=logging.INFO, format='%(asctime)s - %(levelname)s - %(message)s')
logger = logging.getLogger(__name__)

def test_dynamic_schema_extractor():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Å—Ö–µ–º—ã"""
    print("üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Å—Ö–µ–º—ã...")
    
    try:
        from dynamic_schema_extractor import create_dynamic_extractor
        
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç—Ä–æ–∫—É –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
        connection_string = "postgresql://olgasnissarenko@localhost:5432/bi_demo"
        
        print(f"üìä –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î: {connection_string}")
        extractor = create_dynamic_extractor(connection_string, cache_ttl=60)
        
        # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É
        schema = extractor.get_schema()
        
        print(f"‚úÖ –°—Ö–µ–º–∞ —É—Å–ø–µ—à–Ω–æ –∏–∑–≤–ª–µ—á–µ–Ω–∞!")
        print(f"   –¢–∏–ø –ë–î: {schema.database_type}")
        print(f"   –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü: {len(schema.tables)}")
        print(f"   –û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∫–æ–ª–æ–Ω–æ–∫: {sum(len(table.columns) for table in schema.tables)}")
        print(f"   –í–Ω–µ—à–Ω–∏–µ –∫–ª—é—á–∏: {len(schema.foreign_keys)}")
        
        print(f"\nüìã –°—Ö–µ–º–∞ –≤ —Ñ–æ—Ä–º–∞—Ç–µ –ø—Ä–æ–º–ø—Ç–∞:")
        print(schema.to_prompt_format())
        
        print(f"\nüè∑Ô∏è –¢–∞–±–ª–∏—Ü—ã –∏ –∫–æ–ª–æ–Ω–∫–∏:")
        for table in schema.tables:
            print(f"  {table.name}:")
            for col in table.columns[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–µ—Ä–≤—ã–µ 3 –∫–æ–ª–æ–Ω–∫–∏
                print(f"    - {col.name} ({col.type}) {'PK' if col.primary_key else ''} {'FK' if col.foreign_key else ''}")
            if len(table.columns) > 3:
                print(f"    ... –∏ –µ—â–µ {len(table.columns) - 3} –∫–æ–ª–æ–Ω–æ–∫")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ
        print(f"\nüîÑ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∫—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ...")
        schema2 = extractor.get_schema()  # –î–æ–ª–∂–Ω–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫—ç—à
        if schema2 == schema:
            print("‚úÖ –ö—ç—à–∏—Ä–æ–≤–∞–Ω–∏–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ —Ñ–∞–π–ª
        output_file = "test_dynamic_schema.json"
        extractor.save_schema_to_file(output_file)
        print(f"üíæ –°—Ö–µ–º–∞ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∞ –≤ —Ñ–∞–π–ª: {output_file}")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_dynamic_sql_generation():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –≥–µ–Ω–µ—Ä–∞—Ü–∏—é SQL —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º–æ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ü–∏—é SQL —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º–æ–π...")
    
    try:
        from bi_gpt_agent import SQLGenerator
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º–æ–π (–±–µ–∑ API –∫–ª—é—á–µ–π)
        # –ü—Ä–æ—Å—Ç–æ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
        connection_string = "postgresql://olgasnissarenko@localhost:5432/bi_demo"
        
        print("üîß –°–æ–∑–¥–∞–µ–º SQLGenerator —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º–æ–π...")
        generator = SQLGenerator(
            api_key="test",  # –§–∏–∫—Ç–∏–≤–Ω—ã–π –∫–ª—é—á –¥–ª—è —Ç–µ—Å—Ç–∞
            connection_string=connection_string,
            use_dynamic_schema=True
        )
        
        print("‚úÖ SQLGenerator —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        schema_str = generator._get_schema_for_prompt()
        print(f"üìã –°—Ö–µ–º–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
        print(schema_str[:200] + "..." if len(schema_str) > 200 else schema_str)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–æ–≤
        test_query = "–ø–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
        few_shot_prompt = generator._create_few_shot_prompt(schema_str)
        one_shot_prompt = generator._create_one_shot_prompt(schema_str)
        
        print(f"\nüìù Few-shot –ø—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω (—Ä–∞–∑–º–µ—Ä: {len(few_shot_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print(f"üìù One-shot –ø—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω (—Ä–∞–∑–º–µ—Ä: {len(one_shot_prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ–º–ø—Ç–æ–≤ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ SQL: {e}")
        import traceback
        traceback.print_exc()
        return False


def test_finetuned_dynamic_schema():
    """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç fine-tuned –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º–æ–π"""
    print("\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º fine-tuned –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º–æ–π...")
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å fine-tuned –º–æ–¥–µ–ª–∏
        model_path = "finetuning/phi3-mini"
        adapter_path = "finetuning/phi3_bird_lora"
        
        if not os.path.exists(model_path):
            print(f"‚ö†Ô∏è  Fine-tuned –º–æ–¥–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω–∞: {model_path}")
            print("   –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç fine-tuned –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞")
            return True
        
        from finetuned_sql_generator import FineTunedSQLGenerator
        
        connection_string = "postgresql://olgasnissarenko@localhost:5432/bi_demo"
        
        print("üîß –°–æ–∑–¥–∞–µ–º FineTunedSQLGenerator —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º–æ–π...")
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–µ–∑ –∑–∞–≥—Ä—É–∑–∫–∏ –º–æ–¥–µ–ª–∏ (—Ç–æ–ª—å–∫–æ —Å—Ö–µ–º—É)
        generator = FineTunedSQLGenerator(
            model_path=model_path,
            adapter_path=adapter_path,
            connection_string=connection_string,
            use_dynamic_schema=True
        )
        
        print("‚úÖ FineTunedSQLGenerator —Å–æ–∑–¥–∞–Ω —É—Å–ø–µ—à–Ω–æ")
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø–æ–ª—É—á–µ–Ω–∏–µ —Å—Ö–µ–º—ã –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞
        schema_str = generator._get_schema_for_prompt()
        print(f"üìã –°—Ö–µ–º–∞ –¥–ª—è –ø—Ä–æ–º–ø—Ç–∞ –ø–æ–ª—É—á–µ–Ω–∞:")
        print(schema_str[:200] + "..." if len(schema_str) > 200 else schema_str)
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ–º–ø—Ç–∞
        test_query = "–ø–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤"
        prompt = generator._create_prompt(test_query)
        
        print(f"\nüìù –ü—Ä–æ–º–ø—Ç —Å–æ–∑–¥–∞–Ω (—Ä–∞–∑–º–µ—Ä: {len(prompt)} —Å–∏–º–≤–æ–ª–æ–≤)")
        print("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ fine-tuned –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞ –ø—Ä–æ—à–ª–æ —É—Å–ø–µ—à–Ω–æ")
        
        return True
        
    except Exception as e:
        print(f"‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è fine-tuned –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞: {e}")
        import traceback
        traceback.print_exc()
        return False


def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è"""
    print("üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç—ã –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º—ã...")
    
    tests = [
        ("–î–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–π —ç–∫—Å—Ç—Ä–∞–∫—Ç–æ—Ä —Å—Ö–µ–º—ã", test_dynamic_schema_extractor),
        ("–ì–µ–Ω–µ—Ä–∞—Ü–∏—è SQL —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º–æ–π", test_dynamic_sql_generation),
        ("Fine-tuned –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä —Å –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–æ–π —Å—Ö–µ–º–æ–π", test_finetuned_dynamic_schema),
    ]
    
    results = []
    
    for test_name, test_func in tests:
        print(f"\n{'='*60}")
        print(f"–¢–µ—Å—Ç: {test_name}")
        print('='*60)
        
        try:
            result = test_func()
            results.append((test_name, result))
        except Exception as e:
            print(f"‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –≤ —Ç–µ—Å—Ç–µ '{test_name}': {e}")
            results.append((test_name, False))
    
    # –ü–æ–¥–≤–æ–¥–∏–º –∏—Ç–æ–≥–∏
    print(f"\n{'='*60}")
    print("–ò–¢–û–ì–ò –¢–ï–°–¢–ò–†–û–í–ê–ù–ò–Ø")
    print('='*60)
    
    passed = 0
    for test_name, result in results:
        status = "‚úÖ –ü–†–û–ô–î–ï–ù" if result else "‚ùå –ü–†–û–í–ê–õ–ï–ù"
        print(f"{status}: {test_name}")
        if result:
            passed += 1
    
    print(f"\n–†–µ–∑—É–ª—å—Ç–∞—Ç: {passed}/{len(results)} —Ç–µ—Å—Ç–æ–≤ –ø—Ä–æ–π–¥–µ–Ω–æ")
    
    if passed == len(results):
        print("üéâ –í—Å–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ—à–ª–∏ —É—Å–ø–µ—à–Ω–æ!")
        return 0
    else:
        print("‚ö†Ô∏è  –ù–µ–∫–æ—Ç–æ—Ä—ã–µ —Ç–µ—Å—Ç—ã –ø—Ä–æ–≤–∞–ª–∏–ª–∏—Å—å")
        return 1


if __name__ == "__main__":
    sys.exit(main())
