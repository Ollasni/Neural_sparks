#!/usr/bin/env python3
"""
–ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç accuracy –º–æ–¥–µ–ª–µ–π –¥–ª—è SQL –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç Fine-tuned Phi-3 –∏ Custom API –º–æ–¥–µ–ª–∏ –Ω–∞ 50 —Ç–µ—Å—Ç–æ–≤—ã—Ö –∑–∞–ø—Ä–æ—Å–∞—Ö
"""

import json
import time
import os
import sys
from pathlib import Path
from typing import Dict, List, Tuple, Any
import difflib

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –ø—Ä–æ–µ–∫—Ç—É
sys.path.append(str(Path(__file__).parent))

try:
    from bi_gpt_agent import BIGPTAgent
    from config import get_settings
except ImportError as e:
    print(f"‚ùå –û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞: {e}")
    print("–£–±–µ–¥–∏—Ç–µ—Å—å, —á—Ç–æ –≤—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")
    sys.exit(1)

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –º–æ–¥—É–ª–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–≥–æ –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä–∞
import openai
import time

class SimpleSQLGenerator:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π SQL –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä –¥–ª—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è —Å FineTunedSQLGenerator"""
    
    def __init__(self, api_key: str = None, base_url: str = None):
        # –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –∫–∞–∫ OpenAI, —Ç–∞–∫ –∏ –ª–æ–∫–∞–ª—å–Ω—ã—Ö –º–æ–¥–µ–ª–µ–π
        if base_url:
            self.client = openai.OpenAI(api_key=api_key, base_url=base_url)
            self.model_name = "llama4scout"
        else:
            self.client = openai.OpenAI(api_key=api_key)
            self.model_name = "gpt-4"
    
    def generate_sql(self, user_query: str, schema_info: Dict = None) -> Tuple[str, float]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –∏–∑ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞ (—É–ø—Ä–æ—â–µ–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è)"""
        start_time = time.time()
        
        # –°–æ–∑–¥–∞–µ–º –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –≤ FineTunedSQLGenerator
        prompt = self._create_simple_prompt(user_query)
        
        try:
            response = self.client.chat.completions.create(
                model=self.model_name,
                messages=[
                    {"role": "system", "content": "You are a helpful data analyst that writes clean PostgreSQL. Return ONLY SQL without comments or explanations."},
                    {"role": "user", "content": prompt}
                ],
                temperature=0.0,  # –î–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≥–µ–Ω–µ—Ä–∞—Ü–∏—è –∫–∞–∫ –≤ FineTuned
                max_tokens=80,    # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –∫–∞–∫ –≤ FineTuned
                top_p=0.1
            )
            
            sql_query = response.choices[0].message.content.strip()
            
            # –ò–∑–≤–ª–µ–∫–∞–µ–º —á–∏—Å—Ç—ã–π SQL
            if "```sql" in sql_query:
                sql_query = sql_query.split("```sql")[1].split("```")[0].strip()
            elif "```" in sql_query:
                sql_query = sql_query.split("```")[1].strip()
            
            # –û—á–∏—â–∞–µ–º SQL
            sql_query = self._clean_sql(sql_query)
            
            execution_time = time.time() - start_time
            return sql_query, execution_time
            
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL: {e}")
            return "", time.time() - start_time
    
    def _create_simple_prompt(self, user_query: str) -> str:
        """–°–æ–∑–¥–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç –∫–∞–∫ –≤ FineTunedSQLGenerator"""
        schema = """
customers: id (SERIAL), name (VARCHAR), email (VARCHAR), registration_date (DATE), segment (VARCHAR)
products: id (SERIAL), name (VARCHAR), category (VARCHAR), price (DECIMAL), cost (DECIMAL)  
orders: id (SERIAL), customer_id (INTEGER), order_date (DATE), amount (DECIMAL), status (VARCHAR)
sales: id (SERIAL), order_id (INTEGER), product_id (INTEGER), quantity (INTEGER), revenue (DECIMAL), costs (DECIMAL)
inventory: id (SERIAL), product_id (INTEGER), current_stock (INTEGER), warehouse (VARCHAR)
"""
        
        prompt = f"""You are a helpful data analyst that writes clean PostgreSQL.
Return ONLY SQL without comments or explanations.

Database: bi_demo
Schema:
{schema.strip()}

Question: {user_query}
SQL:"""
        
        return prompt
    
    def _clean_sql(self, sql: str) -> str:
        """–û—á–∏—â–∞–µ—Ç SQL –∑–∞–ø—Ä–æ—Å"""
        if not sql:
            return ""
        
        # –£–¥–∞–ª—è–µ–º –ª–∏—à–Ω–∏–µ —Å–∏–º–≤–æ–ª—ã –∏ –ø—Ä–æ–±–µ–ª—ã
        sql = sql.strip()
        
        # –£–¥–∞–ª—è–µ–º –≤–æ–∑–º–æ–∂–Ω—ã–µ –æ–±—ä—è—Å–Ω–µ–Ω–∏—è –ø–æ—Å–ª–µ SQL
        lines = sql.split('\n')
        sql_lines = []
        for line in lines:
            line = line.strip()
            if line and not line.startswith('#') and not line.startswith('--'):
                sql_lines.append(line)
        
        sql = ' '.join(sql_lines)
        
        # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ –µ—Å–ª–∏ –µ—Å—Ç—å
        if sql.endswith(';'):
            sql = sql[:-1]
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ –∑–∞–ø—Ä–æ—Å –Ω–∞—á–∏–Ω–∞–µ—Ç—Å—è —Å —Ä–∞–∑—Ä–µ—à–µ–Ω–Ω–æ–π –∫–æ–º–∞–Ω–¥—ã
        allowed_commands = ['SELECT', 'INSERT', 'UPDATE', 'DELETE']
        if not any(sql.upper().startswith(cmd) for cmd in allowed_commands):
            return ""
        
        # –ë–∞–∑–æ–≤–∞—è –≤–∞–ª–∏–¥–∞—Ü–∏—è —Å—Ç—Ä—É–∫—Ç—É—Ä—ã
        if sql.upper().startswith('SELECT') and 'FROM' not in sql.upper():
            return ""
        
        # –î–æ–±–∞–≤–ª—è–µ–º LIMIT –µ—Å–ª–∏ –µ–≥–æ –Ω–µ—Ç
        if 'LIMIT' not in sql.upper():
            sql += ' LIMIT 1000'
        
        return sql

class SimpleAgent:
    """–£–ø—Ä–æ—â–µ–Ω–Ω—ã–π –∞–≥–µ–Ω—Ç –¥–ª—è —Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–≥–æ —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
    
    def __init__(self, sql_generator):
        self.sql_generator = sql_generator
    
    def generate_sql(self, user_query: str, temperature: float = 0.0, max_tokens: int = 400, prompt_mode: str = "few_shot") -> Tuple[str, float]:
        """–ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–æ–≥–æ –≤–æ–ø—Ä–æ—Å–∞"""
        return self.sql_generator.generate_sql(user_query, None)

class AccuracyTester:
    def __init__(self):
        self.results = {
            'finetuned': {'correct': 0, 'total': 0, 'details': []},
            'custom_api': {'correct': 0, 'total': 0, 'details': []}
        }
        self.test_queries = self.load_test_queries()
        
    def load_test_queries(self) -> List[Dict]:
        """–ó–∞–≥—Ä—É–∂–∞–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–µ –∑–∞–ø—Ä–æ—Å—ã"""
        try:
            with open('new_accuracy_test_queries.json', 'r', encoding='utf-8') as f:
                return json.load(f)
        except FileNotFoundError:
            print("‚ùå –§–∞–π–ª new_accuracy_test_queries.json –Ω–µ –Ω–∞–π–¥–µ–Ω")
            sys.exit(1)
    
    def normalize_sql(self, sql: str) -> str:
        """–ù–æ—Ä–º–∞–ª–∏–∑—É–µ—Ç SQL –¥–ª—è —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        if not sql:
            return ""
        
        # –£–±–∏—Ä–∞–µ–º –ª–∏—à–Ω–∏–µ –ø—Ä–æ–±–µ–ª—ã –∏ –ø–µ—Ä–µ–≤–æ–¥—ã —Å—Ç—Ä–æ–∫
        sql = ' '.join(sql.split())
        
        # –ü—Ä–∏–≤–æ–¥–∏–º –∫ –Ω–∏–∂–Ω–µ–º—É —Ä–µ–≥–∏—Å—Ç—Ä—É
        sql = sql.lower()
        
        # –£–±–∏—Ä–∞–µ–º —Ç–æ—á–∫—É —Å –∑–∞–ø—è—Ç–æ–π –≤ –∫–æ–Ω—Ü–µ
        sql = sql.rstrip(';')
        
        # –ù–æ—Ä–º–∞–ª–∏–∑—É–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ –æ–ø–µ—Ä–∞—Ç–æ—Ä–æ–≤
        sql = sql.replace(' = ', '=').replace(' =', '=').replace('= ', '=')
        sql = sql.replace(' > ', '>').replace(' >', '>').replace('> ', '>')
        sql = sql.replace(' < ', '<').replace(' <', '<').replace('< ', '<')
        sql = sql.replace(' >= ', '>=').replace(' >=', '>=').replace('>= ', '>=')
        sql = sql.replace(' <= ', '<=').replace(' <=', '<=').replace('<= ', '<=')
        sql = sql.replace(' != ', '!=').replace(' !=', '!=').replace('!= ', '!=')
        sql = sql.replace(' <> ', '<>').replace(' <>', '<>').replace('<> ', '<>')
        
        return sql.strip()
    
    def compare_sql(self, expected: str, generated: str) -> Tuple[bool, float]:
        """–°—Ä–∞–≤–Ω–∏–≤–∞–µ—Ç SQL –∑–∞–ø—Ä–æ—Å—ã –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ç–æ—á–Ω–æ—Å—Ç—å"""
        expected_norm = self.normalize_sql(expected)
        generated_norm = self.normalize_sql(generated)
        
        if expected_norm == generated_norm:
            return True, 1.0
        
        # –í—ã—á–∏—Å–ª—è–µ–º —Å—Ö–æ–∂–µ—Å—Ç—å
        similarity = difflib.SequenceMatcher(None, expected_norm, generated_norm).ratio()
        
        # –°—á–∏—Ç–∞–µ–º –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º –µ—Å–ª–∏ —Å—Ö–æ–∂–µ—Å—Ç—å –±–æ–ª—å—à–µ 80%
        is_correct = similarity > 0.5
        
        return is_correct, similarity
    
    def test_model(self, model_name: str, agent: BIGPTAgent) -> Dict:
        """–¢–µ—Å—Ç–∏—Ä—É–µ—Ç –æ–¥–Ω—É –º–æ–¥–µ–ª—å"""
        print(f"\nüß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º {model_name}...")
        
        correct = 0
        total = len(self.test_queries)
        details = []
        
        for i, test_case in enumerate(self.test_queries, 1):
            question = test_case['question']
            expected_sql = test_case['expected_sql']
            
            try:
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL
                start_time = time.time()
                result = agent.generate_sql(question)
                
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç - generate_sql –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç (sql, time)
                if isinstance(result, tuple) and len(result) == 2:
                    generated_sql, gen_time = result
                else:
                    # Fallback –¥–ª—è —Å–ª—É—á–∞—è –∫–æ–≥–¥–∞ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç—Å—è —Ç–æ–ª—å–∫–æ —Å—Ç—Ä–æ–∫–∞
                    generated_sql = result
                    gen_time = time.time() - start_time
                
                generation_time = time.time() - start_time
                
                # –°—Ä–∞–≤–Ω–∏–≤–∞–µ–º
                is_correct, similarity = self.compare_sql(expected_sql, generated_sql)
                
                if is_correct:
                    correct += 1
                
                details.append({
                    'id': test_case['id'],
                    'question': question,
                    'expected': expected_sql,
                    'generated': generated_sql,
                    'correct': is_correct,
                    'similarity': similarity,
                    'time': generation_time
                })
                
                status = "‚úÖ" if is_correct else "‚ùå"
                print(f"{status} {i:2d}/50 - {question[:50]}... (similarity: {similarity:.2f})")
                
            except Exception as e:
                print(f"‚ùå {i:2d}/50 - –û—à–∏–±–∫–∞: {str(e)[:50]}...")
                details.append({
                    'id': test_case['id'],
                    'question': question,
                    'expected': expected_sql,
                    'generated': f"ERROR: {str(e)}",
                    'correct': False,
                    'similarity': 0.0,
                    'time': 0.0
                })
        
        accuracy = correct / total if total > 0 else 0
        
        return {
            'correct': correct,
            'total': total,
            'accuracy': accuracy,
            'details': details
        }
    
    def run_comparison(self):
        """–ó–∞–ø—É—Å–∫–∞–µ—Ç —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ –º–æ–¥–µ–ª–µ–π"""
        print("üöÄ –ó–∞–ø—É—Å–∫ –±—ã—Å—Ç—Ä–æ–≥–æ —Ç–µ—Å—Ç–∞ accuracy –º–æ–¥–µ–ª–µ–π")
        print("üìù –ò—Å–ø–æ–ª—å–∑—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –ø–æ–¥—Ö–æ–¥: –ë–ï–ó –±–∏–∑–Ω–µ—Å-—Å–ª–æ–≤–∞—Ä—è –∏ –ë–ï–ó –ø—Ä–∏–º–µ—Ä–æ–≤")
        print("=" * 60)
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º Fine-tuned –º–æ–¥–µ–ª—å
        try:
            print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Fine-tuned –º–æ–¥–µ–ª–∏...")
            finetuned_agent = BIGPTAgent(use_finetuned=True, model_provider="finetuned")
            print("‚úÖ Fine-tuned –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Fine-tuned –º–æ–¥–µ–ª–∏: {e}")
            print("‚ö†Ô∏è  –ü—Ä–æ–ø—É—Å–∫–∞–µ–º Fine-tuned –º–æ–¥–µ–ª—å –∏ —Ç–µ—Å—Ç–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ Custom API...")
            finetuned_agent = None
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—É—é Custom API –º–æ–¥–µ–ª—å
        try:
            print("üîß –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —É–ø—Ä–æ—â–µ–Ω–Ω–æ–π Custom API –º–æ–¥–µ–ª–∏...")
            # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è API
            settings = get_settings()
            model_config = settings.get_model_config()
            
            # –°–æ–∑–¥–∞–µ–º —É–ø—Ä–æ—â–µ–Ω–Ω—ã–π –≥–µ–Ω–µ—Ä–∞—Ç–æ—Ä
            simple_generator = SimpleSQLGenerator(
                api_key=model_config.get('api_key'),
                base_url=model_config.get('base_url')
            )
            custom_agent = SimpleAgent(simple_generator)
            print("‚úÖ –£–ø—Ä–æ—â–µ–Ω–Ω–∞—è Custom API –º–æ–¥–µ–ª—å –≥–æ—Ç–æ–≤–∞")
        except Exception as e:
            print(f"‚ùå –û—à–∏–±–∫–∞ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ Custom API –º–æ–¥–µ–ª–∏: {e}")
            return
        
        # –¢–µ—Å—Ç–∏—Ä—É–µ–º –º–æ–¥–µ–ª–∏
        finetuned_results = None
        if finetuned_agent:
            print("\n" + "=" * 60)
            finetuned_results = self.test_model("Fine-tuned Phi-3 (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)", finetuned_agent)
        
        print("\n" + "=" * 60)
        custom_api_results = self.test_model("Custom API (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π)", custom_agent)
        
        # –í—ã–≤–æ–¥–∏–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.print_results(finetuned_results, custom_api_results)
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
        self.save_detailed_results(finetuned_results, custom_api_results)
    
    def print_results(self, finetuned_results: Dict, custom_api_results: Dict):
        """–í—ã–≤–æ–¥–∏—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å—Ä–∞–≤–Ω–µ–Ω–∏—è"""
        print("\n" + "=" * 60)
        print("üìä –†–ï–ó–£–õ–¨–¢–ê–¢–´ –°–†–ê–í–ù–ï–ù–ò–Ø")
        print("=" * 60)
        
        if finetuned_results:
            print(f"\nüß† Fine-tuned Phi-3 (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π):")
            print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {finetuned_results['correct']}/{finetuned_results['total']}")
            print(f"   Accuracy: {finetuned_results['accuracy']:.2%}")
        else:
            print(f"\nüß† Fine-tuned Phi-3: –ù–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
        
        print(f"\nüåê Custom API (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π):")
        print(f"   –ü—Ä–∞–≤–∏–ª—å–Ω—ã—Ö: {custom_api_results['correct']}/{custom_api_results['total']}")
        print(f"   Accuracy: {custom_api_results['accuracy']:.2%}")
        
        if finetuned_results:
            print(f"\nüèÜ –ü–û–ë–ï–î–ò–¢–ï–õ–¨ (—Å–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ):")
            if finetuned_results['accuracy'] > custom_api_results['accuracy']:
                print(f"   Fine-tuned Phi-3 (+{finetuned_results['accuracy'] - custom_api_results['accuracy']:.2%})")
            elif custom_api_results['accuracy'] > finetuned_results['accuracy']:
                print(f"   Custom API (+{custom_api_results['accuracy'] - finetuned_results['accuracy']:.2%})")
            else:
                print("   –ù–∏—á—å—è!")
        else:
            print(f"\nüèÜ –†–µ–∑—É–ª—å—Ç–∞—Ç: Custom API (—É–ø—Ä–æ—â–µ–Ω–Ω—ã–π) - Fine-tuned –º–æ–¥–µ–ª—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞")
    
    def save_detailed_results(self, finetuned_results: Dict, custom_api_results: Dict):
        """–°–æ—Ö—Ä–∞–Ω—è–µ—Ç –¥–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤ —Ñ–∞–π–ª"""
        results = {
            'timestamp': time.strftime('%Y-%m-%d %H:%M:%S'),
            'summary': {
                'custom_api': {
                    'correct': custom_api_results['correct'],
                    'total': custom_api_results['total'],
                    'accuracy': custom_api_results['accuracy']
                }
            },
            'details': {
                'custom_api': custom_api_results['details']
            }
        }
        
        if finetuned_results:
            results['summary']['finetuned'] = {
                'correct': finetuned_results['correct'],
                'total': finetuned_results['total'],
                'accuracy': finetuned_results['accuracy']
            }
            results['details']['finetuned'] = finetuned_results['details']
        else:
            results['summary']['finetuned'] = None
            results['details']['finetuned'] = None
        
        filename = f"accuracy_test_results_{int(time.time())}.json"
        with open(filename, 'w', encoding='utf-8') as f:
            json.dump(results, f, ensure_ascii=False, indent=2)
        
        print(f"\nüíæ –î–µ—Ç–∞–ª—å–Ω—ã–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã –≤ {filename}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    print("üéØ –ë—ã—Å—Ç—Ä—ã–π —Ç–µ—Å—Ç accuracy –º–æ–¥–µ–ª–µ–π SQL –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    print("üìù –°–ø—Ä–∞–≤–µ–¥–ª–∏–≤–æ–µ —Å—Ä–∞–≤–Ω–µ–Ω–∏–µ: –ë–ï–ó –±–∏–∑–Ω–µ—Å-—Å–ª–æ–≤–∞—Ä—è –∏ –ë–ï–ó –ø—Ä–∏–º–µ—Ä–æ–≤")
    print("–¢–µ—Å—Ç–∏—Ä—É–µ–º 50 –∑–∞–ø—Ä–æ—Å–æ–≤ –Ω–∞ PostgreSQL")
    
    tester = AccuracyTester()
    tester.run_comparison()

if __name__ == "__main__":
    main()
