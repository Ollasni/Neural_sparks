#!/usr/bin/env python3
"""
–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ BI-GPT Agent
–û–±—ä–µ–¥–∏–Ω—è–µ—Ç –æ—Å–Ω–æ–≤–Ω—É—é —Ñ—É–Ω–∫—Ü–∏–æ–Ω–∞–ª—å–Ω–æ—Å—Ç—å —Å backend –∞—Ä—Ö–∏—Ç–µ–∫—Ç—É—Ä–æ–π
"""

import streamlit as st
import sys
import os
from typing import Optional
import pandas as pd
import plotly.express as px
import plotly.graph_objects as go
from datetime import datetime, timedelta
import json
import time

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç–∏ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞
sys.path.insert(0, os.path.dirname(__file__))
sys.path.insert(0, os.path.join(os.path.dirname(__file__), 'backend'))

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
try:
    from bi_gpt_agent import BIGPTAgent, QueryMetrics
    from config import get_settings
    MAIN_APP_AVAILABLE = True
except ImportError as e:
    st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å –æ—Å–Ω–æ–≤–Ω–æ–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: {e}")
    MAIN_APP_AVAILABLE = False

# –ò–º–ø–æ—Ä—Ç—ã –∏–∑ backend
try:
    from app.config.settings import UIText
    from app.infrastructure.db.postgres import PostgresConfig, make_postgres_engine
    from app.application.use_cases import GetSchemaOverviewUC
    BACKEND_AVAILABLE = True
except ImportError as e:
    st.error(f"‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≥—Ä—É–∑–∏—Ç—å backend: {e}")
    BACKEND_AVAILABLE = False

# –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è —Å—Ç—Ä–∞–Ω–∏—Ü—ã
st.set_page_config(
    page_title="BI-GPT Agent - Integrated",
    page_icon="ü§ñ",
    layout="wide",
    initial_sidebar_state="expanded"
)

# –ö–∞—Å—Ç–æ–º–Ω—ã–µ —Å—Ç–∏–ª–∏
st.markdown("""
<style>
    .main-header {
        font-size: 3rem;
        font-weight: bold;
        color: #1f77b4;
        text-align: center;
        margin-bottom: 2rem;
    }
    .metric-card {
        background: linear-gradient(135deg, #667eea 0%, #764ba2 100%);
        padding: 1rem;
        border-radius: 10px;
        color: white;
        margin: 0.5rem 0;
    }
    .success-box {
        background-color: #d4edda;
        border: 1px solid #c3e6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .error-box {
        background-color: #f8d7da;
        border: 1px solid #f5c6cb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
    .info-box {
        background-color: #d1ecf1;
        border: 1px solid #bee5eb;
        border-radius: 5px;
        padding: 1rem;
        margin: 1rem 0;
    }
</style>
""", unsafe_allow_html=True)

def analyze_sql_error(error_message: str) -> str:
    """–ê–Ω–∞–ª–∏–∑–∏—Ä—É–µ—Ç –æ—à–∏–±–∫—É SQL –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏"""
    error_lower = error_message.lower()
    
    if "column" in error_lower and "does not exist" in error_lower:
        return "–û—à–∏–±–∫–∞: –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π –∫–æ–ª–æ–Ω–∫–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π –ø–æ–ª–µ–π –≤ —Å—Ö–µ–º–µ –ë–î."
    
    elif "table" in error_lower and ("does not exist" in error_lower or "doesn't exist" in error_lower):
        return "–û—à–∏–±–∫–∞: –æ–±—Ä–∞—â–µ–Ω–∏–µ –∫ –Ω–µ—Å—É—â–µ—Å—Ç–≤—É—é—â–µ–π —Ç–∞–±–ª–∏—Ü–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–∑–≤–∞–Ω–∏–π —Ç–∞–±–ª–∏—Ü –≤ —Å—Ö–µ–º–µ –ë–î."
    
    elif "syntax error" in error_lower:
        return "–û—à–∏–±–∫–∞ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å–∞ SQL. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å –Ω–∞–ø–∏—Å–∞–Ω–∏—è SQL –∫–æ–º–∞–Ω–¥."
    
    elif "permission denied" in error_lower or "access denied" in error_lower:
        return "–û—à–∏–±–∫–∞ –¥–æ—Å—Ç—É–ø–∞. –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø—Ä–∞–≤ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –æ–ø–µ—Ä–∞—Ü–∏–∏."
    
    elif "foreign key" in error_lower:
        return "–û—à–∏–±–∫–∞ –≤–Ω–µ—à–Ω–µ–≥–æ –∫–ª—é—á–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–≤—è–∑–∏ –º–µ–∂–¥—É —Ç–∞–±–ª–∏—Ü–∞–º–∏."
    
    elif "duplicate key" in error_lower:
        return "–û—à–∏–±–∫–∞ –¥—É–±–ª–∏—Ä–æ–≤–∞–Ω–∏—è –∫–ª—é—á–∞. –ü–æ–ø—ã—Ç–∫–∞ –≤—Å—Ç–∞–≤–∏—Ç—å –¥—É–±–ª–∏—Ä—É—é—â–µ–µ—Å—è –∑–Ω–∞—á–µ–Ω–∏–µ –≤ —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –ø–æ–ª–µ."
    
    elif "timeout" in error_lower:
        return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è. –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω—è–µ—Ç—Å—è —Å–ª–∏—à–∫–æ–º –¥–æ–ª–≥–æ."
    
    elif "connection" in error_lower:
        return "–û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ."
    
    else:
        return "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Å–∏–Ω—Ç–∞–∫—Å–∏—Å SQL –∏ —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö."

def init_session_state():
    """–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Å—Å–∏–∏"""
    if "engine" not in st.session_state:
        st.session_state.engine = None
    if "last_error" not in st.session_state:
        st.session_state.last_error = None
    if "agent" not in st.session_state:
        st.session_state.agent = None
    if "query_history" not in st.session_state:
        st.session_state.query_history = []
    if "schema_overview" not in st.session_state:
        st.session_state.schema_overview = None
    if "temperature" not in st.session_state:
        st.session_state.temperature = 0.0
    if "max_tokens" not in st.session_state:
        st.session_state.max_tokens = 400
    if "model_choice" not in st.session_state:
        st.session_state.model_choice = "Fine-tuned Phi-3 + LoRA"
    if "show_debug_info" not in st.session_state:
        st.session_state.show_debug_info = True
    if "enable_validation" not in st.session_state:
        st.session_state.enable_validation = True
    if "prompt_mode" not in st.session_state:
        st.session_state.prompt_mode = "few_shot"

def render_database_connection():
    """–†–µ–Ω–¥–µ—Ä —Ñ–æ—Ä–º—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö"""
    st.sidebar.header("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
    
    host = st.sidebar.text_input("Host", value="localhost")
    port = st.sidebar.number_input("Port", min_value=1, max_value=65535, value=5432, step=1)
    user = st.sidebar.text_input("Username", value="olgasnissarenko")
    password = st.sidebar.text_input("Password", type="password", value="")
    database = st.sidebar.text_input("Database Name", value="bi_demo")
    sslmode = st.sidebar.selectbox("SSL Mode", options=["", "require", "disable"], index=2, help="–û–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ")
    
    st.sidebar.divider()
    
    # –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏
    st.sidebar.header("ü§ñ –í—ã–±–æ—Ä –º–æ–¥–µ–ª–∏")
    model_choice = st.sidebar.radio(
        "–ú–æ–¥–µ–ª—å –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL:",
        ["Fine-tuned Phi-3 + LoRA", "Custom API Model"],
        index=0,
        help="Fine-tuned –º–æ–¥–µ–ª—å —Ä–∞–±–æ—Ç–∞–µ—Ç –ª–æ–∫–∞–ª—å–Ω–æ, Custom API —Ç—Ä–µ–±—É–µ—Ç URL –∏ –∫–ª—é—á"
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Custom API
    if model_choice == "Custom API Model":
        api_url = st.sidebar.text_input(
            "API URL", 
            value="https://vsjz8fv63q4oju-8000.proxy.runpod.net/v1",
            help="–í–≤–µ–¥–∏—Ç–µ URL –≤–∞—à–µ–≥–æ API endpoint"
        )
        api_key = st.sidebar.text_input("API Key", type="password", help="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à API –∫–ª—é—á")
        if not api_key:
            st.sidebar.warning("‚ö†Ô∏è –î–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è Custom API –Ω—É–∂–µ–Ω API –∫–ª—é—á")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ SQL
    st.sidebar.divider()
    st.sidebar.header("‚öôÔ∏è –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
    
    # –†–µ–∂–∏–º –ø—Ä–æ–º–ø—Ç–∞
    prompt_mode = st.sidebar.radio(
        "–†–µ–∂–∏–º –ø—Ä–æ–º–ø—Ç–∞:",
        ["Few-shot (—Å –ø—Ä–∏–º–µ—Ä–∞–º–∏)", "One-shot (–ø—Ä–æ—Å—Ç–æ–π)"],
        index=0,
        help="Few-shot: —Å–ª–æ–∂–Ω—ã–π –ø—Ä–æ–º–ø—Ç —Å –ø—Ä–∏–º–µ—Ä–∞–º–∏ –∑–∞–ø—Ä–æ—Å–æ–≤. One-shot: –ø—Ä–æ—Å—Ç–æ–π –ø—Ä–æ–º–ø—Ç —Ç–æ–ª—å–∫–æ —Å –ø—Ä–∞–≤–∏–ª–∞–º–∏."
    )
    
    # –ö–æ–Ω–≤–µ—Ä—Ç–∏—Ä—É–µ–º –≤ —Ñ–æ—Ä–º–∞—Ç –¥–ª—è API
    prompt_mode_value = "few_shot" if prompt_mode == "Few-shot (—Å –ø—Ä–∏–º–µ—Ä–∞–º–∏)" else "one_shot"
    
    temperature = st.sidebar.slider(
        "Temperature", 
        min_value=0.0, 
        max_value=2.0, 
        value=0.0, 
        step=0.1,
        help="–ö–æ–Ω—Ç—Ä–æ–ª–∏—Ä—É–µ—Ç —Å–ª—É—á–∞–π–Ω–æ—Å—Ç—å –æ—Ç–≤–µ—Ç–æ–≤. 0 = –¥–µ—Ç–µ—Ä–º–∏–Ω–∏—Ä–æ–≤–∞–Ω–Ω—ã–π, 2 = –æ—á–µ–Ω—å —Å–ª—É—á–∞–π–Ω—ã–π"
    )
    
    max_tokens = st.sidebar.slider(
        "Max Tokens", 
        min_value=100, 
        max_value=1000, 
        value=400, 
        step=50,
        help="–ú–∞–∫—Å–∏–º–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–æ–∫–µ–Ω–æ–≤ –≤ –æ—Ç–≤–µ—Ç–µ"
    )
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
    with st.sidebar.expander("üîß –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏"):
        show_debug_info = st.checkbox("–ü–æ–∫–∞–∑–∞—Ç—å –æ—Ç–ª–∞–¥–æ—á–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é", value=True)
        enable_validation = st.checkbox("–í–∫–ª—é—á–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—É—é –≤–∞–ª–∏–¥–∞—Ü–∏—é SQL", value=True)
        auto_retry = st.checkbox("–ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–µ –ø–æ–≤—Ç–æ—Ä—ã –ø—Ä–∏ –æ—à–∏–±–∫–∞—Ö", value=True)
        max_retries = st.number_input("–ú–∞–∫—Å–∏–º—É–º –ø–æ–≤—Ç–æ—Ä–æ–≤", min_value=1, max_value=5, value=2)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –≤ session_state
    st.session_state.temperature = temperature
    st.session_state.max_tokens = max_tokens
    st.session_state.model_choice = model_choice
    st.session_state.show_debug_info = show_debug_info
    st.session_state.enable_validation = enable_validation
    st.session_state.prompt_mode = prompt_mode_value
    
    connect_clicked = st.sidebar.button("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", type="primary")
    
    if connect_clicked:
        try:
            cfg = PostgresConfig(
                host=host, port=int(port), user=user, password=password,
                database=database, sslmode=(sslmode or None)
            )
            st.session_state.engine = make_postgres_engine(cfg)
            st.session_state.last_error = None
            
            # –ü–æ–ª—É—á–∞–µ–º —Å—Ö–µ–º—É –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
            if BACKEND_AVAILABLE:
                uc = GetSchemaOverviewUC(st.session_state.engine, schema="public")
                st.session_state.schema_overview = uc.execute()
            
            # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –∞–≥–µ–Ω—Ç–∞
            if MAIN_APP_AVAILABLE and st.session_state.engine:
                try:
                    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –∞–≥–µ–Ω—Ç–∞
                    if model_choice == "Fine-tuned Phi-3 + LoRA":
                        st.session_state.agent = BIGPTAgent(
                            use_finetuned=True,
                            model_provider="finetuned"
                        )
                        st.sidebar.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! Fine-tuned –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                    else:
                        # Custom API Model
                        if not api_key:
                            st.sidebar.error("‚ùå –î–ª—è Custom API –Ω—É–∂–µ–Ω API –∫–ª—é—á")
                        else:
                            st.session_state.agent = BIGPTAgent(
                                api_key=api_key,
                                base_url=api_url,
                                model_provider="local"
                            )
                            st.sidebar.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ! Custom API –∞–≥–µ–Ω—Ç –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω.")
                except Exception as e:
                    st.sidebar.warning(f"‚ö†Ô∏è –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î —É—Å–ø–µ—à–Ω–æ, –Ω–æ –∞–≥–µ–Ω—Ç –Ω–µ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω: {e}")
            else:
                st.sidebar.success("‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö —É—Å–ø–µ—à–Ω–æ!")
                
        except Exception as e:
            st.session_state.engine = None
            st.session_state.last_error = str(e)
            st.sidebar.error("‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è")
            st.sidebar.code(str(e))

def render_schema_overview():
    """–†–µ–Ω–¥–µ—Ä –æ–±–∑–æ—Ä–∞ —Å—Ö–µ–º—ã –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"""
    if not st.session_state.schema_overview:
        return
    
    st.subheader("üß± –°—Ö–µ–º–∞ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö")
    
    # –ú–µ—Ç—Ä–∏–∫–∏
    c1, c2, c3 = st.columns(3)
    c1.metric("–¢–∞–±–ª–∏—Ü", st.session_state.schema_overview.tables_count)
    c2.metric("–ö–æ–ª–æ–Ω–æ–∫", st.session_state.schema_overview.columns_count)
    c3.metric("–¢–∏–ø –ë–î", st.session_state.schema_overview.db_type)
    
    st.divider()
    
    # –î–µ—Ç–∞–ª–∏ —Ç–∞–±–ª–∏—Ü
    for tbl in st.session_state.schema_overview.tables:
        with st.expander(f"üìä {tbl.name} ({len(tbl.columns)} –∫–æ–ª–æ–Ω–æ–∫)"):
            data = [{
                "–ö–æ–ª–æ–Ω–∫–∞": col.name,
                "–¢–∏–ø": col.data_type,
                "Nullable": "‚úì" if col.is_nullable else "‚úó",
                "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é": col.default if col.default is not None else "None"
            } for col in tbl.columns]
            st.dataframe(data, use_container_width=True)

def render_natural_language_query():
    """–†–µ–Ω–¥–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞ –¥–ª—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ —è–∑—ã–∫–∞"""
    if not st.session_state.agent:
        st.info("üîå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    st.subheader("üí¨ –ó–∞–¥–∞–π—Ç–µ –≤–æ–ø—Ä–æ—Å –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ")
    
    # –ü–æ–ª–µ –≤–≤–æ–¥–∞
    user_query = st.text_area(
        "–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –≤–æ–ø—Ä–æ—Å:",
        placeholder="–ù–∞–ø—Ä–∏–º–µ—Ä: –ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ú–æ—Å–∫–≤—ã —Å —Å—É–º–º–æ–π –∑–∞–∫–∞–∑–æ–≤ –±–æ–ª—å—à–µ 10000",
        height=100
    )
    
    col1, col2 = st.columns([1, 4])
    
    with col1:
        generate_clicked = st.button("üöÄ –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL", type="primary")
    
    with col2:
        if st.button("üìä –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–∏–º–µ—Ä—ã"):
            st.session_state.show_examples = not st.session_state.get('show_examples', False)
    
    # –ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤
    if st.session_state.get('show_examples', False):
        st.info("""
        **–ü—Ä–∏–º–µ—Ä—ã –∑–∞–ø—Ä–æ—Å–æ–≤:**
        - –ü–æ–∫–∞–∂–∏ –≤—Å–µ—Ö –∫–ª–∏–µ–Ω—Ç–æ–≤ –∏–∑ –ú–æ—Å–∫–≤—ã
        - –ö–∞–∫–∞—è —Å—Ä–µ–¥–Ω—è—è —Å—É–º–º–∞ –∑–∞–∫–∞–∑–∞ –ø–æ –º–µ—Å—è—Ü–∞–º?
        - –¢–æ–ø-10 —Ç–æ–≤–∞—Ä–æ–≤ –ø–æ –ø—Ä–æ–¥–∞–∂–∞–º
        - –ü–æ–∫–∞–∂–∏ –¥–∏–Ω–∞–º–∏–∫—É –≤—ã—Ä—É—á–∫–∏ –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–π –≥–æ–¥
        - –°–∫–æ–ª—å–∫–æ –∑–∞–∫–∞–∑–æ–≤ –±—ã–ª–æ –≤—á–µ—Ä–∞?
        """)
    
    if generate_clicked and user_query:
        # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
        col1, col2, col3, col4 = st.columns(4)
        with col1:
            st.metric("Temperature", f"{st.session_state.get('temperature', 0.0):.1f}")
        with col2:
            st.metric("Max Tokens", st.session_state.get('max_tokens', 400))
        with col3:
            st.metric("–ú–æ–¥–µ–ª—å", st.session_state.get('model_choice', 'Fine-tuned Phi-3 + LoRA'))
        with col4:
            prompt_mode_display = "Few-shot" if st.session_state.get('prompt_mode', 'few_shot') == 'few_shot' else "One-shot"
            st.metric("–†–µ–∂–∏–º –ø—Ä–æ–º–ø—Ç–∞", prompt_mode_display)
        
        # –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
        progress_container = st.container()
        attempts_container = st.container()
        
        with st.spinner("ü§ñ –ì–µ–Ω–µ—Ä–∏—Ä—É—é PostgreSQL SQL –∑–∞–ø—Ä–æ—Å..."):
            try:
                # –ü–æ–ª—É—á–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –∏–∑ sidebar
                temperature = st.session_state.get('temperature', 0.0)
                max_tokens = st.session_state.get('max_tokens', 400)
                
                # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º SQL —Å –ø–∞—Ä–∞–º–µ—Ç—Ä–∞–º–∏
                result = st.session_state.agent.process_query(
                    user_query, 
                    temperature=temperature, 
                    max_tokens=max_tokens,
                    prompt_mode=st.session_state.get('prompt_mode', 'few_shot')
                )
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—ã—Ç–∫–∞—Ö
                if result.get('attempts_info'):
                    with attempts_container:
                        st.subheader("üîÑ –ü—Ä–æ—Ü–µ—Å—Å –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏")
                        
                        attempts_info = result['attempts_info']
                        total_attempts = len(attempts_info)
                        successful_attempts = sum(1 for attempt in attempts_info if attempt['success'])
                        
                        # –ü—Ä–æ–≥—Ä–µ—Å—Å-–±–∞—Ä
                        progress_bar = st.progress(0)
                        status_text = st.empty()
                        
                        for i, attempt in enumerate(attempts_info):
                            attempt_num = attempt['attempt']
                            
                            if attempt['success']:
                                status_text.success(f"‚úÖ –ü–æ–ø—ã—Ç–∫–∞ {attempt_num} —É—Å–ø–µ—à–Ω–∞! –í—Ä–µ–º—è: {attempt['generation_time']:.3f}—Å")
                                progress_bar.progress(1.0)
                            else:
                                status_text.warning(f"‚ö†Ô∏è –ü–æ–ø—ã—Ç–∫–∞ {attempt_num} –Ω–µ—É–¥–∞—á–Ω–∞. –í—Ä–µ–º—è: {attempt['generation_time']:.3f}—Å")
                                progress_bar.progress(attempt_num / total_attempts)
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏
                                with st.expander(f"‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏ –ø–æ–ø—ã—Ç–∫–∏ {attempt_num}", expanded=False):
                                    st.error(f"**–¢–∏–ø –æ—à–∏–±–∫–∏:** {attempt.get('error_type', 'Unknown')}")
                                    st.code(attempt['error'], language='text')
                                    
                                    # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
                                    error_analysis = analyze_sql_error(attempt['error'])
                                    if error_analysis:
                                        st.info(f"**–ê–Ω–∞–ª–∏–∑:** {error_analysis}")
                                
                                # –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞
                                import time
                                time.sleep(0.5)
                        
                        # –ò—Ç–æ–≥–æ–≤–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
                        col1, col2, col3 = st.columns(3)
                        with col1:
                            st.metric("–í—Å–µ–≥–æ –ø–æ–ø—ã—Ç–æ–∫", total_attempts)
                        with col2:
                            st.metric("–£—Å–ø–µ—à–Ω—ã—Ö", successful_attempts)
                        with col3:
                            st.metric("–ù–µ—É–¥–∞—á–Ω—ã—Ö", total_attempts - successful_attempts)
                
                if result and result.get('sql'):
                    st.success("‚úÖ PostgreSQL SQL –∑–∞–ø—Ä–æ—Å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω!")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
                    if st.session_state.get('show_debug_info', True):
                        with st.expander("üîç –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏", expanded=False):
                            col1, col2 = st.columns(2)
                            
                            with col1:
                                if result.get('metrics'):
                                    metrics = result['metrics']
                                    st.write(f"**–í—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:** {metrics.execution_time:.3f}—Å")
                                    st.write(f"**–¢–æ—á–Ω–æ—Å—Ç—å SQL:** {'‚úÖ' if metrics.sql_accuracy else '‚ùå'}")
                                    st.write(f"**–ë–∏–∑–Ω–µ—Å-—Ç–µ—Ä–º–∏–Ω—ã:** {metrics.business_terms_used}")
                                    st.write(f"**PII –æ–±–Ω–∞—Ä—É–∂–µ–Ω–æ:** {'‚ö†Ô∏è' if metrics.pii_detected else '‚úÖ'}")
                            
                            with col2:
                                st.write(f"**Temperature:** {temperature}")
                                st.write(f"**Max Tokens:** {max_tokens}")
                                st.write(f"**–ú–æ–¥–µ–ª—å:** {st.session_state.get('model_choice', 'Unknown')}")
                                if result.get('business_terms'):
                                    st.write(f"**–ù–∞–π–¥–µ–Ω–Ω—ã–µ —Ç–µ—Ä–º–∏–Ω—ã:** {', '.join(result['business_terms'][:3])}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º SQL
                    st.subheader("üìù –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π SQL:")
                    st.code(result['sql'], language='sql')
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –µ—Å–ª–∏ –≤–∫–ª—é—á–µ–Ω
                    if st.session_state.get('enable_validation', True) and result.get('risk_analysis'):
                        risk_analysis = result['risk_analysis']
                        
                        # –¶–≤–µ—Ç–æ–≤–∞—è –∏–Ω–¥–∏–∫–∞—Ü–∏—è —Ä–∏—Å–∫–∞
                        risk_colors = {
                            'low': 'üü¢',
                            'medium': 'üü°', 
                            'high': 'üü†',
                            'critical': 'üî¥'
                        }
                        
                        risk_icon = risk_colors.get(risk_analysis.risk_level.value, '‚ö™')
                        
                        with st.expander(f"{risk_icon} –ê–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ SQL", expanded=False):
                            col1, col2, col3 = st.columns(3)
                            
                            with col1:
                                st.metric("–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞", risk_analysis.risk_level.value.upper())
                                st.metric("–°–ª–æ–∂–Ω–æ—Å—Ç—å", risk_analysis.complexity_score)
                            
                            with col2:
                                st.metric("JOIN'–æ–≤", risk_analysis.join_count)
                                st.metric("–ü–æ–¥–∑–∞–ø—Ä–æ—Å–æ–≤", risk_analysis.subquery_count)
                            
                            with col3:
                                st.metric("–û—à–∏–±–æ–∫", len(risk_analysis.errors))
                                st.metric("–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–π", len(risk_analysis.warnings))
                            
                            if risk_analysis.errors:
                                st.error("**–û—à–∏–±–∫–∏:**")
                                for error in risk_analysis.errors:
                                    st.write(f"‚Ä¢ {error}")
                            
                            if risk_analysis.warnings:
                                st.warning("**–ü—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏—è:**")
                                for warning in risk_analysis.warnings:
                                    st.write(f"‚Ä¢ {warning}")
                            
                            if risk_analysis.recommendations:
                                st.info("**–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:**")
                                for rec in risk_analysis.recommendations:
                                    st.write(f"‚Ä¢ {rec}")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã
                    if result.get('data') is not None:
                        st.subheader("üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –∑–∞–ø—Ä–æ—Å–∞:")
                        
                        if isinstance(result['data'], pd.DataFrame) and not result['data'].empty:
                            st.dataframe(result['data'], use_container_width=True)
                            
                            # –ü—Ä–æ—Å—Ç—ã–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏
                            if len(result['data']) > 1:
                                numeric_cols = result['data'].select_dtypes(include=['number']).columns
                                if len(numeric_cols) > 0:
                                    st.subheader("üìà –í–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—è")
                                    
                                    chart_type = st.selectbox(
                                        "–¢–∏–ø –≥—Ä–∞—Ñ–∏–∫–∞:",
                                        ["–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞", "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫", "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞"]
                                    )
                                    
                                    if chart_type == "–°—Ç–æ–ª–±—á–∞—Ç–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
                                        fig = px.bar(result['data'], x=result['data'].columns[0], y=numeric_cols[0])
                                        st.plotly_chart(fig, use_container_width=True)
                                    elif chart_type == "–õ–∏–Ω–µ–π–Ω—ã–π –≥—Ä–∞—Ñ–∏–∫":
                                        fig = px.line(result['data'], x=result['data'].columns[0], y=numeric_cols[0])
                                        st.plotly_chart(fig, use_container_width=True)
                                    elif chart_type == "–ö—Ä—É–≥–æ–≤–∞—è –¥–∏–∞–≥—Ä–∞–º–º–∞":
                                        fig = px.pie(result['data'], values=numeric_cols[0], names=result['data'].columns[0])
                                        st.plotly_chart(fig, use_container_width=True)
                        else:
                            st.info("–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–µ–π
                    history_item = {
                        'query': user_query,
                        'sql': result['sql'],
                        'timestamp': datetime.now(),
                        'success': True,
                        'temperature': temperature,
                        'max_tokens': max_tokens,
                        'model': st.session_state.get('model_choice', 'Unknown')
                    }
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –º–µ—Ç—Ä–∏–∫–∏ –µ—Å–ª–∏ –µ—Å—Ç—å
                    if result.get('metrics'):
                        metrics = result['metrics']
                        history_item.update({
                            'execution_time': metrics.execution_time,
                            'sql_accuracy': metrics.sql_accuracy,
                            'business_terms_used': metrics.business_terms_used,
                            'pii_detected': metrics.pii_detected
                        })
                    
                    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ —Ä–∏—Å–∫–æ–≤ –µ—Å–ª–∏ –µ—Å—Ç—å
                    if result.get('risk_analysis'):
                        risk = result['risk_analysis']
                        history_item.update({
                            'risk_level': risk.risk_level.value,
                            'complexity_score': risk.complexity_score,
                            'join_count': risk.join_count,
                            'subquery_count': risk.subquery_count
                        })
                    
                    st.session_state.query_history.append(history_item)
                else:
                    st.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å PostgreSQL SQL –∑–∞–ø—Ä–æ—Å")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—ã—Ç–∫–∞—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
                    if result.get('attempts_info'):
                        with st.expander("üîÑ –î–µ—Ç–∞–ª–∏ –Ω–µ—É–¥–∞—á–Ω—ã—Ö –ø–æ–ø—ã—Ç–æ–∫", expanded=True):
                            for attempt in result['attempts_info']:
                                if not attempt['success']:
                                    st.error(f"**–ü–æ–ø—ã—Ç–∫–∞ {attempt['attempt']}:** {attempt.get('error_type', 'Unknown')}")
                                    st.code(attempt['error'], language='text')
                                    
                                    # –ê–Ω–∞–ª–∏–∑ –æ—à–∏–±–∫–∏
                                    error_analysis = analyze_sql_error(attempt['error'])
                                    if error_analysis:
                                        st.info(f"**–ê–Ω–∞–ª–∏–∑:** {error_analysis}")
                    
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                    history_item = {
                        'query': user_query,
                        'sql': None,
                        'timestamp': datetime.now(),
                        'success': False,
                        'error': '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å SQL –∑–∞–ø—Ä–æ—Å',
                        'temperature': temperature,
                        'max_tokens': max_tokens,
                        'model': st.session_state.get('model_choice', 'Unknown')
                    }
                    
                    if result.get('attempts_info'):
                        history_item['attempts_info'] = result['attempts_info']
                    
                    st.session_state.query_history.append(history_item)
                    
            except Exception as e:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {e}")
                
                # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—à–∏–±–∫—É –≤ –∏—Å—Ç–æ—Ä–∏—é
                st.session_state.query_history.append({
                    'query': user_query,
                    'sql': None,
                    'timestamp': datetime.now(),
                    'success': False,
                    'error': str(e),
                    'temperature': temperature,
                    'max_tokens': max_tokens,
                    'model': st.session_state.get('model_choice', 'Unknown')
                })

def render_query_history():
    """–†–µ–Ω–¥–µ—Ä –∏—Å—Ç–æ—Ä–∏–∏ –∑–∞–ø—Ä–æ—Å–æ–≤"""
    if not st.session_state.query_history:
        return
    
    st.subheader("üìö –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
    
    for i, item in enumerate(reversed(st.session_state.query_history[-10:])):  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–µ 10
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∏–∫–æ–Ω–∫—É —Å—Ç–∞—Ç—É—Å–∞
        status_icon = "‚úÖ" if item['success'] else "‚ùå"
        
        with st.expander(f"{status_icon} –ó–∞–ø—Ä–æ—Å {len(st.session_state.query_history) - i}: {item['query'][:50]}..."):
            col1, col2 = st.columns([3, 1])
            
            with col1:
                st.write(f"**–í–æ–ø—Ä–æ—Å:** {item['query']}")
                if item['sql']:
                    st.code(item['sql'], language='sql')
                if not item['success'] and 'error' in item:
                    st.error(f"–û—à–∏–±–∫–∞: {item['error']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –µ—Å–ª–∏ –µ—Å—Ç—å
                if item.get('execution_time'):
                    st.write(f"**–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {item['execution_time']:.3f}—Å")
                
                if item.get('temperature') is not None:
                    st.write(f"**Temperature:** {item['temperature']}")
                
                if item.get('max_tokens'):
                    st.write(f"**Max Tokens:** {item['max_tokens']}")
                
                if item.get('model'):
                    st.write(f"**–ú–æ–¥–µ–ª—å:** {item['model']}")
                
                if item.get('risk_level'):
                    risk_colors = {'low': 'üü¢', 'medium': 'üü°', 'high': 'üü†', 'critical': 'üî¥'}
                    risk_icon = risk_colors.get(item['risk_level'], '‚ö™')
                    st.write(f"**–£—Ä–æ–≤–µ–Ω—å —Ä–∏—Å–∫–∞:** {risk_icon} {item['risk_level'].upper()}")
                
                if item.get('complexity_score') is not None:
                    st.write(f"**–°–ª–æ–∂–Ω–æ—Å—Ç—å:** {item['complexity_score']}")
            
            with col2:
                st.write(f"**–í—Ä–µ–º—è:** {item['timestamp'].strftime('%H:%M:%S')}")
                if item['success']:
                    st.success("‚úÖ –£—Å–ø–µ—à–Ω–æ")
                    
                    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –∫–∞—á–µ—Å—Ç–≤–∞
                    if item.get('sql_accuracy') is not None:
                        st.write(f"**–¢–æ—á–Ω–æ—Å—Ç—å SQL:** {'‚úÖ' if item['sql_accuracy'] else '‚ùå'}")
                    
                    if item.get('business_terms_used') is not None:
                        st.write(f"**–ë–∏–∑–Ω–µ—Å-—Ç–µ—Ä–º–∏–Ω—ã:** {item['business_terms_used']}")
                    
                    if item.get('pii_detected') is not None:
                        st.write(f"**PII:** {'‚ö†Ô∏è' if item['pii_detected'] else '‚úÖ'}")
                    
                    if item.get('join_count') is not None:
                        st.write(f"**JOIN'–æ–≤:** {item['join_count']}")
                    
                if item.get('subquery_count') is not None:
                    st.write(f"**–ü–æ–¥–∑–∞–ø—Ä–æ—Å–æ–≤:** {item['subquery_count']}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ø—ã—Ç–∫–∞—Ö –µ—Å–ª–∏ –µ—Å—Ç—å
                if item.get('attempts_info'):
                    st.write("**–ü–æ–ø—ã—Ç–∫–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏:**")
                    for attempt in item['attempts_info']:
                        if attempt['success']:
                            st.write(f"  ‚úÖ –ü–æ–ø—ã—Ç–∫–∞ {attempt['attempt']}: {attempt['generation_time']:.3f}—Å")
                        else:
                            st.write(f"  ‚ùå –ü–æ–ø—ã—Ç–∫–∞ {attempt['attempt']}: {attempt.get('error_type', 'Unknown')}")
                
                if not item['success']:
                    st.error("‚ùå –û—à–∏–±–∫–∞")

def render_performance_metrics():
    """–†–µ–Ω–¥–µ—Ä –º–µ—Ç—Ä–∏–∫ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏"""
    if not st.session_state.agent:
        st.info("üîå –°–Ω–∞—á–∞–ª–∞ –ø–æ–¥–∫–ª—é—á–∏—Ç–µ—Å—å –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö")
        return
    
    st.subheader("üìä –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏")
    
    # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç—Ä–∏–∫–∏ –æ—Ç –∞–≥–µ–Ω—Ç–∞
    try:
        metrics = st.session_state.agent.get_performance_metrics()
        
        if not metrics:
            st.info("üìà –ü–æ–∫–∞ –Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö –æ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏. –í—ã–ø–æ–ª–Ω–∏—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –∑–∞–ø—Ä–æ—Å–æ–≤ –¥–ª—è —Å–±–æ—Ä–∞ –º–µ—Ç—Ä–∏–∫.")
            return
        
        # –û—Å–Ω–æ–≤–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏
        col1, col2, col3, col4 = st.columns(4)
        
        with col1:
            st.metric(
                "–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è", 
                f"{metrics.get('avg_execution_time', 0):.3f}—Å",
                help="–°—Ä–µ–¥–Ω–µ–µ –≤—Ä–µ–º—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤"
            )
        
        with col2:
            st.metric(
                "–¢–æ—á–Ω–æ—Å—Ç—å SQL", 
                f"{metrics.get('sql_accuracy_rate', 0)*100:.1f}%",
                help="–ü—Ä–æ—Ü–µ–Ω—Ç —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã—Ö SQL –∑–∞–ø—Ä–æ—Å–æ–≤"
            )
        
        with col3:
            st.metric(
                "–ß–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫", 
                f"{metrics.get('error_rate', 0)*100:.1f}%",
                help="–ü—Ä–æ—Ü–µ–Ω—Ç –∑–∞–ø—Ä–æ—Å–æ–≤ —Å –æ—à–∏–±–∫–∞–º–∏"
            )
        
        with col4:
            st.metric(
                "–í—Å–µ–≥–æ –∑–∞–ø—Ä–æ—Å–æ–≤", 
                metrics.get('total_queries', 0),
                help="–û–±—â–µ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤"
            )
        
        st.divider()
        
        # –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
        st.subheader("üìà –î–µ—Ç–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞")
        
        # –ì—Ä–∞—Ñ–∏–∫ –≤—Ä–µ–º–µ–Ω–∏ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è
        if st.session_state.query_history:
            execution_times = []
            timestamps = []
            
            for item in st.session_state.query_history:
                if item.get('success') and 'execution_time' in item:
                    execution_times.append(item['execution_time'])
                    timestamps.append(item['timestamp'])
            
            if execution_times:
                import plotly.graph_objects as go
                
                fig = go.Figure()
                fig.add_trace(go.Scatter(
                    x=timestamps,
                    y=execution_times,
                    mode='lines+markers',
                    name='–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è',
                    line=dict(color='#1f77b4')
                ))
                
                fig.update_layout(
                    title="–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤",
                    xaxis_title="–í—Ä–µ–º—è",
                    yaxis_title="–°–µ–∫—É–Ω–¥—ã",
                    hovermode='x unified'
                )
                
                st.plotly_chart(fig, use_container_width=True)
        
        # –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ —Ç–∏–ø–∞–º –∑–∞–ø—Ä–æ—Å–æ–≤
        if st.session_state.query_history:
            st.subheader("üìã –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –ø–æ –∑–∞–ø—Ä–æ—Å–∞–º")
            
            successful_queries = [q for q in st.session_state.query_history if q.get('success')]
            failed_queries = [q for q in st.session_state.query_history if not q.get('success')]
            
            col1, col2 = st.columns(2)
            
            with col1:
                st.write("**–£—Å–ø–µ—à–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:**")
                for i, query in enumerate(successful_queries[-5:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    with st.expander(f"‚úÖ –ó–∞–ø—Ä–æ—Å {i}: {query['query'][:50]}..."):
                        st.write(f"**–í—Ä–µ–º—è:** {query['timestamp'].strftime('%H:%M:%S')}")
                        if 'execution_time' in query:
                            st.write(f"**–í—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è:** {query['execution_time']:.3f}—Å")
                        if 'sql' in query and query['sql']:
                            st.code(query['sql'], language='sql')
            
            with col2:
                st.write("**–ù–µ—É–¥–∞—á–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã:**")
                for i, query in enumerate(failed_queries[-5:], 1):  # –ü–æ—Å–ª–µ–¥–Ω–∏–µ 5
                    with st.expander(f"‚ùå –ó–∞–ø—Ä–æ—Å {i}: {query['query'][:50]}..."):
                        st.write(f"**–í—Ä–µ–º—è:** {query['timestamp'].strftime('%H:%M:%S')}")
                        if 'error' in query:
                            st.error(f"**–û—à–∏–±–∫–∞:** {query['error']}")
        
        # –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏
        st.subheader("üí° –†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏")
        
        recommendations = []
        
        if metrics.get('avg_execution_time', 0) > 2.0:
            recommendations.append("‚Ä¢ –í—ã—Å–æ–∫–æ–µ –≤—Ä–µ–º—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è - —Ä–∞—Å—Å–º–æ—Ç—Ä–∏—Ç–µ —É–º–µ–Ω—å—à–µ–Ω–∏–µ max_tokens")
        
        if metrics.get('error_rate', 0) > 0.2:
            recommendations.append("‚Ä¢ –í—ã—Å–æ–∫–∞—è —á–∞—Å—Ç–æ—Ç–∞ –æ—à–∏–±–æ–∫ - –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —É–≤–µ–ª–∏—á–∏—Ç—å temperature")
        
        if metrics.get('sql_accuracy_rate', 0) < 0.8:
            recommendations.append("‚Ä¢ –ù–∏–∑–∫–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å SQL - –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –∫–∞—á–µ—Å—Ç–≤–æ –≤—Ö–æ–¥–Ω—ã—Ö –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        if not recommendations:
            recommendations.append("‚Ä¢ –°–∏—Å—Ç–µ–º–∞ —Ä–∞–±–æ—Ç–∞–µ—Ç –æ–ø—Ç–∏–º–∞–ª—å–Ω–æ! üéâ")
        
        for rec in recommendations:
            st.write(rec)
        
    except Exception as e:
        st.error(f"‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –º–µ—Ç—Ä–∏–∫: {e}")

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
    init_session_state()
    
    # –ó–∞–≥–æ–ª–æ–≤–æ–∫
    st.markdown('<h1 class="main-header">ü§ñ BI-GPT Agent - Integrated</h1>', unsafe_allow_html=True)
    st.markdown("**–ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è —Å–∏—Å—Ç–µ–º–∞ –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –±–∞–∑–∞–º–∏ –¥–∞–Ω–Ω—ã—Ö –Ω–∞ –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω–æ–º —è–∑—ã–∫–µ**")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –º–æ–¥—É–ª–µ–π
    if not MAIN_APP_AVAILABLE and not BACKEND_AVAILABLE:
        st.error("‚ùå –ù–∏ –æ–¥–∏–Ω –∏–∑ –º–æ–¥—É–ª–µ–π –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —É—Å—Ç–∞–Ω–æ–≤–∫—É –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π.")
        return
    
    # –†–µ–Ω–¥–µ—Ä –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
    render_database_connection()
    
    if st.session_state.engine is None:
        st.info("üîå –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö –≤ –±–æ–∫–æ–≤–æ–π –ø–∞–Ω–µ–ª–∏ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è¬ª")
        return
    
    # –û—Å–Ω–æ–≤–Ω–æ–π –∫–æ–Ω—Ç–µ–Ω—Ç
    tab1, tab2, tab3, tab4 = st.tabs(["üóÑÔ∏è –°—Ö–µ–º–∞ –ë–î", "üí¨ –ï—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–π —è–∑—ã–∫", "üìö –ò—Å—Ç–æ—Ä–∏—è", "üìä –ú–µ—Ç—Ä–∏–∫–∏"])
    
    with tab1:
        render_schema_overview()
    
    with tab2:
        render_natural_language_query()
    
    with tab3:
        render_query_history()
    
    with tab4:
        render_performance_metrics()
    
    # –§—É—Ç–µ—Ä
    st.divider()
    st.caption("BI-GPT Agent v1.0 - –ò–Ω—Ç–µ–≥—Ä–∏—Ä–æ–≤–∞–Ω–Ω–∞—è –≤–µ—Ä—Å–∏—è")

if __name__ == "__main__":
    main()
