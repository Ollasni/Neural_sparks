#!/usr/bin/env python3
"""
–î–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏: –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã —É–±—Ä–∞–Ω—ã –∏–∑ –∫–æ–¥–∞
"""

import os
import sys
from pathlib import Path

def test_no_hardcoded_secrets():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤ –∫–æ–¥–µ –Ω–µ—Ç —Ö–∞—Ä–¥–∫–æ–¥ —Å–µ–∫—Ä–µ—Ç–æ–≤"""
    print("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Ç—Å—É—Ç—Å—Ç–≤–∏—è —Ö–∞—Ä–¥–∫–æ–¥ —Å–µ–∫—Ä–µ—Ç–æ–≤ –≤ –∫–æ–¥–µ...")
    
    # –°–ø–∏—Å–æ–∫ –ø–æ–¥–æ–∑—Ä–∏—Ç–µ–ª—å–Ω—ã—Ö –ø–∞—Ç—Ç–µ—Ä–Ω–æ–≤
    suspicious_patterns = [
        "app-yzNqYV4e205Vui63kMQh1ckU",
        "https://hmw6p24zvcdgay-8000.proxy.runpod.net",
        "https://bkwg3037dnb7aq-8000.proxy.runpod.net",
        "sk-",  # OpenAI –∫–ª—é—á–∏
        "API_KEY=app",
        "api_key=\"app",
        "api_key='app"
    ]
    
    # –§–∞–π–ª—ã –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    files_to_check = [
        "bi_gpt_agent.py",
        "start_system.py", 
        "streamlit_app.py",
        "config.py"
    ]
    
    found_issues = []
    
    for file_path in files_to_check:
        if not Path(file_path).exists():
            continue
            
        print(f"  –ü—Ä–æ–≤–µ—Ä—è–µ–º {file_path}...")
        
        try:
            with open(file_path, 'r', encoding='utf-8') as f:
                content = f.read()
                
            for pattern in suspicious_patterns:
                if pattern in content:
                    found_issues.append(f"{file_path}: –Ω–∞–π–¥–µ–Ω –ø–∞—Ç—Ç–µ—Ä–Ω '{pattern}'")
                    
        except Exception as e:
            print(f"    ‚ö†Ô∏è  –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è {file_path}: {e}")
    
    if found_issues:
        print(f"  ‚ùå –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã:")
        for issue in found_issues:
            print(f"    - {issue}")
        return False
    else:
        print(f"  ‚úÖ –•–∞—Ä–¥–∫–æ–¥ —Å–µ–∫—Ä–µ—Ç–æ–≤ –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ {len(files_to_check)} —Ñ–∞–π–ª–∞—Ö")
        return True

def test_env_file_protection():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞—â–∏—Ç—É .env —Ñ–∞–π–ª–∞"""
    print("\nüõ°Ô∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞—â–∏—Ç—ã .env —Ñ–∞–π–ª–∞...")
    
    gitignore_path = Path(".gitignore")
    env_path = Path(".env")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º .gitignore
    if not gitignore_path.exists():
        print("  ‚ö†Ô∏è  .gitignore —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return False
    
    try:
        with open(gitignore_path, 'r', encoding='utf-8') as f:
            gitignore_content = f.read()
        
        if ".env" in gitignore_content:
            print("  ‚úÖ .env —Ñ–∞–π–ª –∑–∞—â–∏—â–µ–Ω –≤ .gitignore")
        else:
            print("  ‚ùå .env —Ñ–∞–π–ª –ù–ï –∑–∞—â–∏—â–µ–Ω –≤ .gitignore")
            return False
            
    except Exception as e:
        print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .gitignore: {e}")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ .env
    if env_path.exists():
        print("  ‚úÖ .env —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
    else:
        print("  ‚ö†Ô∏è  .env —Ñ–∞–π–ª –Ω–µ –Ω–∞–π–¥–µ–Ω (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è env.example)")
    
    return True

def test_environment_variables():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è"""
    print("\nüîë –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –º–æ–∂–µ–º –ø—Ä–æ—á–∏—Ç–∞—Ç—å .env
    env_path = Path(".env")
    if env_path.exists():
        print("  üìÅ –ß–∏—Ç–∞–µ–º .env —Ñ–∞–π–ª...")
        
        try:
            with open(env_path, 'r', encoding='utf-8') as f:
                env_lines = f.readlines()
            
            env_vars = {}
            for line in env_lines:
                line = line.strip()
                if line and not line.startswith('#') and '=' in line:
                    key, value = line.split('=', 1)
                    env_vars[key] = value
            
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(env_vars)} –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –≤ .env")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–ª—é—á–µ–≤—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
            required_vars = ['LOCAL_API_KEY', 'LOCAL_BASE_URL']
            missing_vars = []
            
            for var in required_vars:
                if var in env_vars and env_vars[var] and env_vars[var] != f"your_{var.lower()}_here":
                    print(f"  ‚úÖ {var}: –Ω–∞—Å—Ç—Ä–æ–µ–Ω")
                else:
                    missing_vars.append(var)
                    print(f"  ‚ö†Ô∏è  {var}: –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∏–ª–∏ –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            
            if missing_vars:
                print(f"  üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ 'python3 setup_env.py' –¥–ª—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏: {', '.join(missing_vars)}")
                return len(missing_vars) == 0
            else:
                print(f"  ‚úÖ –í—Å–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
                return True
                
        except Exception as e:
            print(f"  ‚ùå –û—à–∏–±–∫–∞ —á—Ç–µ–Ω–∏—è .env: {e}")
            return False
    else:
        print("  üìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è...")
        
        system_vars = ['LOCAL_API_KEY', 'LOCAL_BASE_URL']
        found_vars = []
        
        for var in system_vars:
            if os.getenv(var):
                found_vars.append(var)
                print(f"  ‚úÖ {var}: –Ω–∞–π–¥–µ–Ω –≤ —Å–∏—Å—Ç–µ–º–µ")
            else:
                print(f"  ‚ùå {var}: –Ω–µ –Ω–∞–π–¥–µ–Ω")
        
        if found_vars:
            print(f"  ‚úÖ –ù–∞–π–¥–µ–Ω–æ {len(found_vars)} —Å–∏—Å—Ç–µ–º–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö")
            return len(found_vars) >= 2
        else:
            print("  ‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–Ω—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –Ω–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
            print("  üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª: cp env.example .env")
            return False

def test_config_system():
    """–ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–∏—Å—Ç–µ–º—É –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"""
    print("\n‚öôÔ∏è  –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏...")
    
    try:
        # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é
        sys.path.insert(0, str(Path.cwd()))
        
        try:
            from config import get_settings, validate_config
            
            print("  ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –¥–æ—Å—Ç—É–ø–Ω–∞")
            
            # –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–≥—Ä—É–∑–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏
            try:
                settings = get_settings()
                print(f"  ‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –∑–∞–≥—Ä—É–∂–µ–Ω—ã: {settings.app_name}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–∞–ª–∏–¥–∞—Ü–∏—é
                errors = validate_config()
                if errors:
                    print(f"  ‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏:")
                    for error in errors[:3]:  # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–µ 3
                        print(f"     - {error}")
                else:
                    print("  ‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∫–ª—é—á
                try:
                    api_key = settings.get_api_key()
                    if api_key and len(api_key) > 5:
                        print(f"  ‚úÖ API –∫–ª—é—á –∑–∞–≥—Ä—É–∂–µ–Ω: {api_key[:4]}...")
                    else:
                        print("  ‚ö†Ô∏è  API –∫–ª—é—á –Ω–µ –∑–∞–≥—Ä—É–∂–µ–Ω –∏–ª–∏ –ø—É—Å—Ç–æ–π")
                except Exception as e:
                    print(f"  ‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è API –∫–ª—é—á–∞: {e}")
                
                return True
                
            except Exception as e:
                print(f"  ‚ùå –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫: {e}")
                return False
                
        except ImportError:
            print("  ‚ö†Ô∏è  –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞ (–Ω–µ—Ç pydantic)")
            print("  üí° –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏: pip install pydantic")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –±–∞–∑–æ–≤—É—é –∑–∞–≥—Ä—É–∑–∫—É –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
            api_key = os.getenv('LOCAL_API_KEY')
            base_url = os.getenv('LOCAL_BASE_URL')
            
            if api_key and base_url:
                print(f"  ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –¥–æ—Å—Ç—É–ø–Ω—ã –Ω–∞–ø—Ä—è–º—É—é")
                return True
            else:
                print(f"  ‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")
                return False
                
    except Exception as e:
        print(f"  ‚ùå –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        return False

def main():
    """–ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏"""
    print("üîí BI-GPT Agent - –¢–µ—Å—Ç –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏")
    print("=" * 60)
    print("–ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ –≤—Å–µ —Å–µ–∫—Ä–µ—Ç—ã —É–±—Ä–∞–Ω—ã –∏–∑ –∫–æ–¥–∞ –∏ –∑–∞—â–∏—â–µ–Ω—ã")
    print("=" * 60)
    
    tests = [
        ("–û—Ç—Å—É—Ç—Å—Ç–≤–∏–µ —Ö–∞—Ä–¥–∫–æ–¥ —Å–µ–∫—Ä–µ—Ç–æ–≤", test_no_hardcoded_secrets),
        ("–ó–∞—â–∏—Ç–∞ .env —Ñ–∞–π–ª–∞", test_env_file_protection),
        ("–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è", test_environment_variables),
        ("–°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏", test_config_system)
    ]
    
    passed = 0
    total = len(tests)
    
    for test_name, test_func in tests:
        print(f"\n{'='*20} {test_name} {'='*20}")
        try:
            if test_func():
                print(f"‚úÖ {test_name}: –ü–†–û–ô–î–ï–ù")
                passed += 1
            else:
                print(f"‚ùå {test_name}: –ù–ï –ü–†–û–ô–î–ï–ù")
        except Exception as e:
            print(f"üí• {test_name}: –û–®–ò–ë–ö–ê - {e}")
    
    # –ò—Ç–æ–≥–æ–≤—ã–π –æ—Ç—á–µ—Ç
    print("\n" + "=" * 60)
    print("üìä –ò–¢–û–ì–û–í–´–ô –û–¢–ß–ï–¢ –ë–ï–ó–û–ü–ê–°–ù–û–°–¢–ò")
    print("=" * 60)
    
    success_rate = (passed / total) * 100
    print(f"–ü—Ä–æ–π–¥–µ–Ω–æ —Ç–µ—Å—Ç–æ–≤: {passed}/{total} ({success_rate:.1f}%)")
    
    if success_rate >= 75:
        print("üéâ –û–¢–õ–ò–ß–ù–´–ô –†–ï–ó–£–õ–¨–¢–ê–¢! –ë–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç—å –Ω–∞ –≤—ã—Å–æ–∫–æ–º —É—Ä–æ–≤–Ω–µ:")
        print("   ‚úÖ –°–µ–∫—Ä–µ—Ç—ã —É–±—Ä–∞–Ω—ã –∏–∑ –∫–æ–¥–∞")
        print("   ‚úÖ .env —Ñ–∞–π–ª –∑–∞—â–∏—â–µ–Ω")  
        print("   ‚úÖ –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –Ω–∞—Å—Ç—Ä–æ–µ–Ω—ã")
        print("   ‚úÖ –°–∏—Å—Ç–µ–º–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç–∞–µ—Ç")
        
        print("\nüöÄ –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞ –∫ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é:")
        print("   python3 start_system.py")
        
    elif success_rate >= 50:
        print("‚ö†Ô∏è  –•–û–†–û–®–ò–ô –†–ï–ó–£–õ–¨–¢–ê–¢, –Ω–æ –µ—Å—Ç—å –æ–±–ª–∞—Å—Ç–∏ –¥–ª—è —É–ª—É—á—à–µ–Ω–∏—è:")
        print("   üí° –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 setup_env.py")
        
    else:
        print("üö® –¢–†–ï–ë–£–ï–¢–°–Ø –í–ù–ò–ú–ê–ù–ò–ï –∫ –±–µ–∑–æ–ø–∞—Å–Ω–æ—Å—Ç–∏:")
        print("   üí° –ù–∞—Å—Ç—Ä–æ–π—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è")
        print("   üí° –°–æ–∑–¥–∞–π—Ç–µ .env —Ñ–∞–π–ª")
        print("   üí° –ó–∞–ø—É—Å—Ç–∏—Ç–µ: python3 setup_env.py")
    
    print(f"\nüìö –ü–æ–¥—Ä–æ–±–Ω—ã–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏–∏: SECURITY_SETUP.md")
    
    return 0 if success_rate >= 75 else 1

if __name__ == "__main__":
    try:
        exit_code = main()
        sys.exit(exit_code)
    except KeyboardInterrupt:
        print("\n\nüëã –¢–µ—Å—Ç –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º")
        sys.exit(1)
    except Exception as e:
        print(f"\n\nüí• –ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞: {e}")
        sys.exit(1)
