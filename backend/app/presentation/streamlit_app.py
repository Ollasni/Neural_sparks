import streamlit as st
from typing import Optional, List, Dict, Any
import sys
import os
import pandas as pd
from sqlalchemy import text
from sqlalchemy.exc import SQLAlchemyError

# –î–æ–±–∞–≤–ª—è–µ–º –ø—É—Ç—å –∫ –º–æ–¥—É–ª—é app
sys.path.insert(0, os.path.join(os.path.dirname(__file__), '..', '..'))

from app.config.settings import UIText
from app.infrastructure.db.postgres import PostgresConfig, make_postgres_engine
from app.application.use_cases import GetSchemaOverviewUC
from app.application.sql_executor import SQLExecutor, QueryValidator

st.set_page_config(page_title="Streamlit", layout="wide")

# --------- –ö–∞—Å—Ç–æ–º–Ω—ã–π CSS –¥–ª—è —É–≤–µ–ª–∏—á–µ–Ω–Ω–æ–≥–æ —à—Ä–∏—Ñ—Ç–∞ ----------
# --------- –ö–∞—Å—Ç–æ–º–Ω—ã–π CSS –¥–ª—è –∞–∫–∫—É—Ä–∞—Ç–Ω–æ–≥–æ —É–≤–µ–ª–∏—á–µ–Ω–∏—è ----------
st.markdown("""
    <style>
    /* –¢–æ–ª—å–∫–æ –∑–Ω–∞—á–µ–Ω–∏—è –≤ –º–µ—Ç—Ä–∏–∫–∞—Ö */
    [data-testid="stMetricValue"] {
        font-size: 160% !important;
    }
    /* –¢–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç –≤ —Ç–∞–±–ª–∏—Ü–∞—Ö */
    .stDataFrame div {
        font-size: 115% !important;
    }
    </style>
    """, unsafe_allow_html=True)

# --------- Sidebar: —Ñ–æ—Ä–º–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è ----------
st.sidebar.header("üîå –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –∫ –ë–î")

# –ü–µ—Ä–µ–∫–ª—é—á–∞—Ç–µ–ª—å –º–µ–∂–¥—É –ª–æ–∫–∞–ª—å–Ω–æ–π –∏ —É–¥–∞–ª–µ–Ω–Ω–æ–π –ë–î
db_type = st.sidebar.radio(
    "–¢–∏–ø –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è",
    ["–õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î", "–£–¥–∞–ª–µ–Ω–Ω–∞—è –ë–î (Neon)"],
    index=0
)

if db_type == "–õ–æ–∫–∞–ª—å–Ω–∞—è –ë–î":
    host = st.sidebar.text_input("Host", value="localhost")
    port = st.sidebar.number_input("Port", min_value=1, max_value=65535, value=5432, step=1)
    user = st.sidebar.text_input("Username", value="olgasnissarenko")
    password = st.sidebar.text_input("Password", type="password", value="")
    database = st.sidebar.text_input("Database Name", value="bi_demo")
    sslmode = st.sidebar.selectbox("SSL Mode", options=["disable", "require", "prefer"], index=0, help="–†–µ–∂–∏–º SSL")
else:
    st.sidebar.info("–ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è Neon")
    host = st.sidebar.text_input("Host", value="ep-young-tree-agad2ram-pooler.c-2.eu-central-1.aws.neon.tech")
    port = st.sidebar.number_input("Port", min_value=1, max_value=65535, value=5432, step=1)
    user = st.sidebar.text_input("Username", value="neondb_owner")
    password = st.sidebar.text_input("Password", type="password", value="npg_TrW8nyL4CItx")
    database = st.sidebar.text_input("Database Name", value="neondb")
    sslmode = st.sidebar.selectbox("SSL Mode", options=["require", "prefer", "disable"], index=0, help="–†–µ–∂–∏–º SSL")

connect_clicked = st.sidebar.button("üîó –ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è", type="primary")

if "engine" not in st.session_state:
    st.session_state.engine = None
if "last_error" not in st.session_state:
    st.session_state.last_error = None
if "connection_info" not in st.session_state:
    st.session_state.connection_info = None

if connect_clicked:
    try:
        cfg = PostgresConfig(
            host=host, port=int(port), user=user, password=password,
            database=database, sslmode=sslmode
        )
        st.session_state.engine = make_postgres_engine(cfg)
        st.session_state.last_error = None
        st.session_state.connection_info = {
            "host": host,
            "port": port,
            "user": user,
            "database": database,
            "sslmode": sslmode
        }
        st.sidebar.success(UIText.connect_success)
    except Exception as e:
        st.session_state.engine = None
        st.session_state.last_error = str(e)
        st.sidebar.error(UIText.connect_fail)
        st.sidebar.code(str(e))

# --------- –û—Å–Ω–æ–≤–Ω–æ–π —ç–∫—Ä–∞–Ω ----------
st.title(UIText.title)

if st.session_state.engine is None:
    st.info("üîå –í–≤–µ–¥–∏—Ç–µ –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è —Å–ª–µ–≤–∞ –∏ –Ω–∞–∂–º–∏—Ç–µ ¬´–ü–æ–¥–∫–ª—é—á–∏—Ç—å—Å—è¬ª.")
else:
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏
    if st.session_state.connection_info:
        info = st.session_state.connection_info
        st.success(f"‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–æ –∫ {info['host']}:{info['port']}/{info['database']} –∫–∞–∫ {info['user']}")
    
    # –°–æ–∑–¥–∞–µ–º —Ç–∞–±—ã –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ñ—É–Ω–∫—Ü–∏–π
    tab1, tab2, tab3 = st.tabs(["üìä –°—Ö–µ–º–∞ –ë–î", "üîç SQL –ó–∞–ø—Ä–æ—Å—ã", "üìà –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã"])
    
    with tab1:
        st.subheader(UIText.schema_title)
        uc = GetSchemaOverviewUC(st.session_state.engine, schema="public")
        try:
            overview = uc.execute()
            
            c1, c2, c3 = st.columns(3)
            c1.metric("–¢–∞–±–ª–∏—Ü", overview.tables_count)
            c2.metric("–ö–æ–ª–æ–Ω–æ–∫", overview.columns_count)
            c3.metric("–¢–∏–ø –ë–î", overview.db_type)

            st.divider()

            # –ê–∫–∫–æ—Ä–¥–µ–æ–Ω—ã –ø–æ —Ç–∞–±–ª–∏—Ü–∞–º
            for tbl in overview.tables:
                with st.expander(f"{tbl.name} ({len(tbl.columns)} –∫–æ–ª–æ–Ω–æ–∫)"):
                    data = [{
                        "name": col.name,
                        "type": col.data_type,
                        "nullable": "‚úì" if col.is_nullable else "",
                        "default": col.default if col.default is not None else "None"
                    } for col in tbl.columns]
                    st.dataframe(data, use_container_width=True)
                    
        except Exception as e:
            st.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ö–µ–º—É: {e}")
    
    with tab2:
        st.subheader("üîç –í—ã–ø–æ–ª–Ω–µ–Ω–∏–µ SQL –∑–∞–ø—Ä–æ—Å–æ–≤")
        
        # SQL —Ä–µ–¥–∞–∫—Ç–æ—Ä
        sql_query = st.text_area(
            "–í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å:",
            placeholder="SELECT * FROM table_name LIMIT 10;",
            height=150,
            help="–í–≤–µ–¥–∏—Ç–µ SQL –∑–∞–ø—Ä–æ—Å –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è. –ë—É–¥—å—Ç–µ –æ—Å—Ç–æ—Ä–æ–∂–Ω—ã —Å –∏–∑–º–µ–Ω—è—é—â–∏–º–∏ –∑–∞–ø—Ä–æ—Å–∞–º–∏!"
        )
        
        col1, col2 = st.columns([1, 4])
        with col1:
            execute_clicked = st.button("‚ñ∂Ô∏è –í—ã–ø–æ–ª–Ω–∏—Ç—å", type="primary")
        with col2:
            limit = st.number_input("–õ–∏–º–∏—Ç —Å—Ç—Ä–æ–∫:", min_value=1, max_value=10000, value=1000, step=100)
        
        if execute_clicked and sql_query.strip():
            # –í–∞–ª–∏–¥–∞—Ü–∏—è –∑–∞–ø—Ä–æ—Å–∞
            dangerous_ops = QueryValidator.contains_dangerous_operations(sql_query)
            if dangerous_ops:
                st.warning(f"‚ö†Ô∏è –ó–∞–ø—Ä–æ—Å —Å–æ–¥–µ—Ä–∂–∏—Ç –ø–æ—Ç–µ–Ω—Ü–∏–∞–ª—å–Ω–æ –æ–ø–∞—Å–Ω—ã–µ –æ–ø–µ—Ä–∞—Ü–∏–∏: {', '.join(dangerous_ops)}")
                
                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –∫–Ω–æ–ø–∫—É –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
                if st.button("üö® –í—ã–ø–æ–ª–Ω–∏—Ç—å –Ω–µ—Å–º–æ—Ç—Ä—è –Ω–∞ –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ", type="secondary"):
                    executor = SQLExecutor(st.session_state.engine)
                    success, result, error = executor.execute_query(sql_query, limit)
                    
                    if success:
                        if isinstance(result, pd.DataFrame):
                            if len(result) > 0:
                                st.success(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Å—Ç—Ä–æ–∫")
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                                col1, col2, col3 = st.columns(3)
                                col1.metric("–°—Ç—Ä–æ–∫", len(result))
                                col2.metric("–ö–æ–ª–æ–Ω–æ–∫", len(result.columns))
                                col3.metric("–†–∞–∑–º–µ—Ä", f"{result.memory_usage(deep=True).sum() / 1024:.1f} KB")
                                
                                # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                                st.dataframe(result, use_container_width=True)
                                
                                # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
                                col1, col2, col3 = st.columns(3)
                                with col1:
                                    csv = result.to_csv(index=False)
                                    st.download_button(
                                        "üì• –°–∫–∞—á–∞—Ç—å CSV",
                                        csv,
                                        "query_result.csv",
                                        "text/csv"
                                    )
                                with col2:
                                    json = result.to_json(orient='records', indent=2)
                                    st.download_button(
                                        "üì• –°–∫–∞—á–∞—Ç—å JSON",
                                        json,
                                        "query_result.json",
                                        "application/json"
                                    )
                            else:
                                st.info("–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                        else:
                            st.success(f"‚úÖ {result}")
                    else:
                        st.error(f"‚ùå –û—à–∏–±–∫–∞: {error}")
            else:
                # –ë–µ–∑–æ–ø–∞—Å–Ω—ã–π –∑–∞–ø—Ä–æ—Å - –≤—ã–ø–æ–ª–Ω—è–µ–º —Å—Ä–∞–∑—É
                executor = SQLExecutor(st.session_state.engine)
                success, result, error = executor.execute_query(sql_query, limit)
                
                if success:
                    if isinstance(result, pd.DataFrame):
                        if len(result) > 0:
                            st.success(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Å—Ç—Ä–æ–∫")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
                            col1, col2, col3 = st.columns(3)
                            col1.metric("–°—Ç—Ä–æ–∫", len(result))
                            col2.metric("–ö–æ–ª–æ–Ω–æ–∫", len(result.columns))
                            col3.metric("–†–∞–∑–º–µ—Ä", f"{result.memory_usage(deep=True).sum() / 1024:.1f} KB")
                            
                            # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –¥–∞–Ω–Ω—ã–µ
                            st.dataframe(result, use_container_width=True)
                            
                            # –ö–Ω–æ–ø–∫–∏ —ç–∫—Å–ø–æ—Ä—Ç–∞
                            col1, col2, col3 = st.columns(3)
                            with col1:
                                csv = result.to_csv(index=False)
                                st.download_button(
                                    "üì• –°–∫–∞—á–∞—Ç—å CSV",
                                    csv,
                                    "query_result.csv",
                                    "text/csv"
                                )
                            with col2:
                                json = result.to_json(orient='records', indent=2)
                                st.download_button(
                                    "üì• –°–∫–∞—á–∞—Ç—å JSON",
                                    json,
                                    "query_result.json",
                                    "application/json"
                                )
                        else:
                            st.info("–ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω, –Ω–æ –¥–∞–Ω–Ω—ã—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω–æ")
                    else:
                        st.success(f"‚úÖ {result}")
                        
                    # –î–æ–±–∞–≤–ª—è–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é
                    if "query_history" not in st.session_state:
                        st.session_state.query_history = []
                    st.session_state.query_history.append((sql_query, pd.Timestamp.now()))
                else:
                    st.error(f"‚ùå –û—à–∏–±–∫–∞: {error}")
        
        # –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤
        if "query_history" not in st.session_state:
            st.session_state.query_history = []
        
        if st.session_state.query_history:
            st.subheader("üìú –ò—Å—Ç–æ—Ä–∏—è –∑–∞–ø—Ä–æ—Å–æ–≤")
            for i, (query, timestamp) in enumerate(reversed(st.session_state.query_history[-10:])):
                if st.button(f"üìã {query[:50]}...", key=f"hist_{i}"):
                    st.session_state.sql_query = query
                    st.rerun()
    
    with tab3:
        st.subheader("üìà –ë—ã—Å—Ç—Ä—ã–µ –∑–∞–ø—Ä–æ—Å—ã")
        
        # –ü—Ä–µ–¥—É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å—ã
        quick_queries = {
            "–ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ —Ç–∞–±–ª–∏—Ü—ã": "SELECT table_name FROM information_schema.tables WHERE table_schema = 'public';",
            "–†–∞–∑–º–µ—Ä –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö": "SELECT pg_size_pretty(pg_database_size(current_database()));",
            "–ê–∫—Ç–∏–≤–Ω—ã–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è": "SELECT count(*) as active_connections FROM pg_stat_activity;",
            "–ü–æ—Å–ª–µ–¥–Ω–∏–µ 10 –∑–∞–ø–∏—Å–µ–π": "SELECT * FROM {table_name} ORDER BY {id_column} DESC LIMIT 10;",
            "–°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–∞–±–ª–∏—Ü": """
                SELECT 
                    schemaname,
                    tablename,
                    attname,
                    n_distinct,
                    correlation
                FROM pg_stats 
                WHERE schemaname = 'public'
                LIMIT 20;
            """,
            "–ò–Ω–¥–µ–∫—Å—ã": """
                SELECT 
                    t.relname as table_name,
                    i.relname as index_name,
                    pg_size_pretty(pg_relation_size(i.oid)) as size
                FROM pg_class t
                JOIN pg_index ix ON t.oid = ix.indrelid
                JOIN pg_class i ON i.oid = ix.indexrelid
                WHERE t.relkind = 'r'
                ORDER BY pg_relation_size(i.oid) DESC
                LIMIT 10;
            """
        }
        
        selected_query = st.selectbox("–í—ã–±–µ—Ä–∏—Ç–µ –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å:", list(quick_queries.keys()))
        
        if st.button("üöÄ –í—ã–ø–æ–ª–Ω–∏—Ç—å –±—ã—Å—Ç—Ä—ã–π –∑–∞–ø—Ä–æ—Å"):
            query = quick_queries[selected_query]
            st.text_area("SQL –∑–∞–ø—Ä–æ—Å:", value=query, height=100, disabled=True)
            
            executor = SQLExecutor(st.session_state.engine)
            success, result, error = executor.execute_query(query)
            
            if success:
                if isinstance(result, pd.DataFrame):
                    st.success(f"‚úÖ –ó–∞–ø—Ä–æ—Å –≤—ã–ø–æ–ª–Ω–µ–Ω —É—Å–ø–µ—à–Ω–æ! –ü–æ–ª—É—á–µ–Ω–æ {len(result)} —Å—Ç—Ä–æ–∫")
                    st.dataframe(result, use_container_width=True)
                else:
                    st.success(f"‚úÖ {result}")
            else:
                st.error(f"‚ùå –û—à–∏–±–∫–∞: {error}")

st.caption("üí° –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —Ç–∞–±—ã –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å–æ —Å—Ö–µ–º–æ–π –ë–î, –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è SQL –∑–∞–ø—Ä–æ—Å–æ–≤ –∏ –±—ã—Å—Ç—Ä–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞ –¥–∞–Ω–Ω—ã—Ö.")
